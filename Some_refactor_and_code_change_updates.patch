Subject: [PATCH] Some refactor and code change updates
---
Index: app/src/main/java/com/example/nordicnews/data/network/IApiRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/network/IApiRepository.kt b/app/src/main/java/com/example/nordicnews/data/network/IApiRepository.kt
--- a/app/src/main/java/com/example/nordicnews/data/network/IApiRepository.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/network/IApiRepository.kt	(date 1717281091236)
@@ -5,35 +5,54 @@
 
 interface IApiRepository {
 
-    suspend fun ping() : String
-    suspend fun getNewsBySource(sources : String = "bbc-news", page : Int = 1) : NewsResponse
-    suspend fun searchNewsV1(keyword: String = "apple", from: LocalDate, to:LocalDate? = LocalDate.now()) : NewsResponse
-    suspend fun searchNewsV2(keyword: String = "tesla", from: LocalDate? = LocalDate.now().minusMonths(1)) : NewsResponse
-    suspend fun searchNewsByDomain(keyword: String = "wsj.com") : NewsResponse
-    suspend fun getHeadlinesByCountryAndCategory(country : String = "us",category : String = "business") : NewsResponse
+    suspend fun ping(): String
 
-    suspend fun getHeadlinesByCountryAndCategoryV1(category : String) : NewsResponse
-    suspend fun getHeadlinesBySource(source : String ="techcrunch") : NewsResponse
+    suspend fun getNewsBySource(
+        sources: String = "bbc-news",
+        page: Int = 1
+    ): NewsResponse
 
-}
+    suspend fun searchNewsV1(
+        keyword: String = "apple",
+        from: LocalDate,
+        to: LocalDate? = LocalDate.now()
+    ): NewsResponse
 
-class ApiRepository(private val nordicNewsApiService: NordicNewsApiService) : IApiRepository{
-    override suspend fun ping(): String {
-        return nordicNewsApiService.ping()
-    }
+    suspend fun searchNewsV2(
+        keyword: String = "tesla",
+        from: LocalDate? = LocalDate.now().minusMonths(1)
+    ): NewsResponse
+    suspend fun searchNewsByDomain(
+        keyword: String = "wsj.com"
+    ): NewsResponse
+    suspend fun getHeadlinesByCountryAndCategory(
+        country: String = "us",
+        category: String = "business"
+    ): NewsResponse
+
+    suspend fun getHeadlinesByCountryAndCategoryV1(
+        category: String
+    ): NewsResponse
+
+    suspend fun getHeadlinesBySource(
+        source: String = "techcrunch"
+    ): NewsResponse
 
-    override suspend fun getNewsBySource(sources: String, page: Int): NewsResponse {
-        //Log.d("NEWS","${nordicNewsApiService.getNewsBySource(sources,page)} data")
-        return  nordicNewsApiService.getNewsBySource(sources,page)
-    }
+}
+
+class ApiRepository(
+    private val nordicNewsApiService: NordicNewsApiService
+): IApiRepository {
+    override suspend fun ping(): String = nordicNewsApiService.ping()
+
+    override suspend fun getNewsBySource(sources: String, page: Int): NewsResponse =
+       nordicNewsApiService.getNewsBySource(sources,page)
 
     override suspend fun searchNewsV1(
         keyword: String,
         from: LocalDate,
         to: LocalDate?
-    ): NewsResponse {
-        return nordicNewsApiService.searchNewsV1(keyword,from,to)
-    }
+    ): NewsResponse = nordicNewsApiService.searchNewsV1(keyword, from, to)
 
     override suspend fun searchNewsV2(keyword: String, from: LocalDate?): NewsResponse {
         Log.d("Search_Request_Params", "$keyword : $from")
@@ -47,12 +66,15 @@
     override suspend fun getHeadlinesByCountryAndCategory(
         country: String,
         category: String
-    ): NewsResponse {
-        return nordicNewsApiService.getHeadlinesByCountryAndCategory(country, category)
-    }
-    override suspend fun getHeadlinesByCountryAndCategoryV1(category: String): NewsResponse {
-        return nordicNewsApiService.getHeadlinesByCountryAndCategoryV1(category)
-    }
+    ): NewsResponse = nordicNewsApiService.getHeadlinesByCountryAndCategory(
+        country,
+        category
+    )
+    override suspend fun getHeadlinesByCountryAndCategoryV1(
+        category: String
+    ): NewsResponse = nordicNewsApiService.getHeadlinesByCountryAndCategoryV1(
+        category
+    )
 
     override suspend fun getHeadlinesBySource(source: String): NewsResponse {
        return  nordicNewsApiService.getHeadlinesBySource(source)
Index: app/src/main/java/com/example/nordicnews/ui/home/HomeViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/home/HomeViewModel.kt b/app/src/main/java/com/example/nordicnews/ui/home/HomeViewModel.kt
--- a/app/src/main/java/com/example/nordicnews/ui/home/HomeViewModel.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/home/HomeViewModel.kt	(date 1717278023337)
@@ -9,7 +9,6 @@
 import com.example.nordicnews.NordicNewsApplication
 import com.example.nordicnews.data.models.Article
 import com.example.nordicnews.data.models.Business
-import com.example.nordicnews.data.models.Category
 import com.example.nordicnews.data.models.General
 import com.example.nordicnews.data.models.Sports
 import com.example.nordicnews.data.models.Technology
@@ -20,7 +19,6 @@
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.map
 import kotlinx.coroutines.flow.stateIn
-import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 import java.io.IOException
 
@@ -43,17 +41,14 @@
         }
     }
 
-    val isLiteDisplayMode: StateFlow<Boolean> = userPreferencesRepository.isLightMode
-        .map {
-            it
-        }
-        .stateIn(
+    val isLiteDisplayMode: StateFlow<Boolean> =
+        userPreferencesRepository.isLightMode.map { it }.stateIn(
             viewModelScope,
             SharingStarted.WhileSubscribed(500),
             false
         )
 
-    var categoryuiState = MutableStateFlow<List<Category>>(
+    var categoryUIState = MutableStateFlow(
         value = listOf(General(),Business(),Technology(), Sports())
     )
         private set
@@ -61,19 +56,18 @@
     var uiState = MutableStateFlow<HomeUiState>(HomeUiState.Loading)
         private set
 
-   private fun getNewsBySource(source : String){
+   private fun getNewsBySource(source : String) {
        viewModelScope.launch {
            uiState.value =  try {
                val allNews = apiRepository.getNewsBySource(source)
                HomeUiState.Success(allNews.articles)
-
-           }catch (e: IOException){
+           } catch (_: IOException) {
                 HomeUiState.Error
            }
        }
-    }
+   }
 
-    private fun checkServerStatus(){
+    private fun checkServerStatus() {
         viewModelScope.launch {
             val ping = apiRepository.ping()
             Log.d("PING","$ping data")
@@ -89,6 +83,6 @@
 
 sealed interface HomeUiState {
     data class Success(val articleList : List<Article> = listOf()) : HomeUiState
-    object Error : HomeUiState
-    object Loading : HomeUiState
+    data object Error : HomeUiState
+    data object Loading : HomeUiState
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/home/HomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/home/HomeScreen.kt b/app/src/main/java/com/example/nordicnews/ui/home/HomeScreen.kt
--- a/app/src/main/java/com/example/nordicnews/ui/home/HomeScreen.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/home/HomeScreen.kt	(date 1717278023351)
@@ -33,7 +33,7 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.mutableIntStateOf
 import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.runtime.setValue
@@ -87,13 +87,13 @@
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun HomeScreen(
-    navigateToDetailScreen : (Article) -> Unit,
-    navigateToSearchScreen : (String) -> Unit,
+    navigateToDetailScreen : (Article) -> Unit = {},
+    navigateToSearchScreen : (String) -> Unit = {},
     navController: NavController,
     viewModel: HomeViewModel = viewModel(factory = HomeViewModel.Factory)
 ) {
     val uiState by viewModel.uiState.collectAsState()
-    val categoryList by viewModel.categoryuiState.collectAsState()
+    val categoryList by viewModel.categoryUIState.collectAsState()
 
     val isLiteMode: Boolean by viewModel.isLiteDisplayMode.collectAsState()
     Log.e("MODE", "isLiteMode: $isLiteMode")
@@ -126,7 +126,7 @@
         val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
         val scope = rememberCoroutineScope()
         var selectedItemIndex by rememberSaveable {
-            mutableStateOf(0)
+            mutableIntStateOf(0)
         }
         ModalNavigationDrawer(
             drawerContent = {
@@ -139,29 +139,27 @@
                             },
                             selected = index == selectedItemIndex,
                             onClick = {
-
                                 selectedItemIndex = index
 
-                                if(item.destinationRoute == null) {
+                                if (item.destinationRoute == null) {
                                     scope.launch {
                                         drawerState.close()
                                     }
-                                }
-                                else
-                                {
+                                } else {
                                     navController.navigate(item.destinationRoute)
                                 }
                             },
                             icon = {
                                 Icon(
-                                    imageVector = if (index == selectedItemIndex) {
-                                        item.selectedIcon
-                                    } else item.unselectedIcon,
+                                    imageVector = item.selectedIcon.takeIf {
+                                        index == selectedItemIndex
+                                    } ?: item.unselectedIcon,
                                     contentDescription = item.title
                                 )
                             },
-                            modifier = Modifier
-                                .padding(NavigationDrawerItemDefaults.ItemPadding)
+                            modifier = Modifier.padding(
+                                NavigationDrawerItemDefaults.ItemPadding
+                            )
                         )
                     }
                 }
@@ -175,11 +173,13 @@
                             Text(text = "Home")
                         },
                         navigationIcon = {
-                            IconButton(onClick = {
-                                scope.launch {
-                                    drawerState.open()
+                            IconButton(
+                                onClick = {
+                                    scope.launch {
+                                        drawerState.open()
+                                    }
                                 }
-                            }) {
+                            ) {
                                 Icon(
                                     imageVector = Icons.Default.Menu,
                                     contentDescription = "Menu"
@@ -190,15 +190,17 @@
                 },
                 bottomBar = {
                     BottomAppBar(
-                        containerColor = Color.White,
+                        containerColor = Color.White
                     ) {
                         Footer(navController)
                     }
                 }
             ) { innerPadding ->
 
-                when(uiState){
-                    is HomeUiState.Loading -> LoadingScreen(modifier = Modifier.fillMaxSize())
+                when(uiState) {
+                    is HomeUiState.Loading -> LoadingScreen(
+                        modifier = Modifier.fillMaxSize()
+                    )
                     is HomeUiState.Success -> Result(
                         categoryList = categoryList,
                         navigateToSearchScreen = navigateToSearchScreen,
@@ -207,7 +209,9 @@
                         articles = (uiState as HomeUiState.Success).articleList,
                         modifier = Modifier.padding(innerPadding)
                     )
-                    is HomeUiState.Error -> ErrorScreen( modifier = Modifier.fillMaxSize())
+                    is HomeUiState.Error -> ErrorScreen(
+                        modifier = Modifier.fillMaxSize()
+                    )
                 }
             }
         }
@@ -225,11 +229,13 @@
     LazyColumn(
         modifier = modifier,
     ) {
-        if(isLiteMode.not()) {
+        if (isLiteMode.not()) {
             item {
                 FixedHeader(
                     article = ArticleMockData.articleList[13],
-                    onItemClick = {navigateToDetailScreen(it)}
+                    onItemClick = {
+                        navigateToDetailScreen(it)
+                    }
                 )
             }
             item { Spacer(modifier = Modifier.height(50.dp)) }
@@ -265,19 +271,14 @@
                     style = MaterialTheme.typography.headlineMedium,
                     color = Color(29, 27, 32),
                     modifier = Modifier.padding(
-                        //start = 25.dp,
-                        //end = 25.dp,
                         bottom = 20.dp
                     )
                 )
 
                 ArticleListV1(
                     onItemClick = { navigateToDetailScreen(it) },
-                    // Mock Article Data
-                    //articles = ArticleMockData.articleList
-
                     // Data from Api
-                    articles = articles//uiState.ArticleList,
+                    articles = articles,
                 )
             }
         }
@@ -290,9 +291,8 @@
 @Composable
 private fun HomeScreenPreview() {
     NordicNewsTheme {
-        HomeScreen(navController = rememberNavController(),
-            navigateToDetailScreen = {},
-            navigateToSearchScreen = {}
+        HomeScreen(
+            navController = rememberNavController()
         )
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/theme/Type.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/theme/Type.kt b/app/src/main/java/com/example/nordicnews/ui/theme/Type.kt
--- a/app/src/main/java/com/example/nordicnews/ui/theme/Type.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/theme/Type.kt	(date 1717268107841)
@@ -5,7 +5,7 @@
 import androidx.compose.ui.text.font.Font
 import androidx.compose.ui.text.font.FontFamily
 import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.TextUnit
 import androidx.compose.ui.unit.sp
 import com.example.nordicnews.R
 
@@ -18,44 +18,46 @@
 )
 
 val Typography = Typography(
-    headlineLarge = TextStyle(
-        fontFamily = Roboto,
-        letterSpacing = 0.sp,
+    headlineLarge = robotoTextStyle(
         fontWeight = FontWeight.Normal,
         fontSize = 28.sp,
         lineHeight = 36.sp
     ),
-    headlineMedium = TextStyle(
-        fontFamily = Roboto,
-        letterSpacing = 0.sp,
+    headlineMedium = robotoTextStyle(
         fontWeight = FontWeight.Bold,
         fontSize = 20.sp,
         lineHeight = 28.sp
     ),
-    headlineSmall = TextStyle(
-        fontFamily = Roboto,
-        letterSpacing = 0.sp,
+    headlineSmall = robotoTextStyle(
         fontWeight = FontWeight.Medium,
         fontSize = 16.sp,
         lineHeight = 22.sp
     ),
-    bodyLarge = TextStyle(
-        fontFamily = Roboto,
-        letterSpacing = 0.sp,
+    bodyLarge = robotoTextStyle(
         fontWeight = FontWeight.Normal,
         fontSize = 15.sp,
         lineHeight = 24.sp
     ),
     // TODO: Check if caption is required instead of label as per figma requirement
-    labelSmall = TextStyle(
-        fontFamily = Roboto,
-        letterSpacing = 0.sp,
+    labelSmall = robotoTextStyle(
         fontWeight = FontWeight.Normal,
         fontSize = 14.sp,
     ),
 
 )
 
+fun robotoTextStyle(
+    fontWeight: FontWeight,
+    fontSize: TextUnit,
+    lineHeight: TextUnit = TextUnit.Unspecified
+): TextStyle = TextStyle(
+    fontFamily = Roboto,
+    letterSpacing = 0.sp,
+    fontWeight = fontWeight,
+    fontSize = fontSize,
+    lineHeight = lineHeight
+)
+
 /*
 val Typography = Typography(
     bodyLarge = TextStyle(
Index: app/src/main/java/com/example/nordicnews/data/NordicNewsDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/NordicNewsDatabase.kt b/app/src/main/java/com/example/nordicnews/data/NordicNewsDatabase.kt
--- a/app/src/main/java/com/example/nordicnews/data/NordicNewsDatabase.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/NordicNewsDatabase.kt	(date 1717281091225)
@@ -10,7 +10,7 @@
 /**
  * Database class with a singleton Instance object.
  */
-@Database(entities = arrayOf(Article::class), version = 1, exportSchema = false)
+@Database(entities = [Article::class], version = 1, exportSchema = false)
 @TypeConverters(ArticleTypeConvertor::class)
 abstract class NordicNewsDatabase : RoomDatabase() {
 
@@ -23,7 +23,11 @@
         fun getDatabase(context: Context): NordicNewsDatabase {
             // if the Instance is not null, return it, otherwise create a new database instance.
             return Instance ?: synchronized(this) {
-                Room.databaseBuilder(context, NordicNewsDatabase::class.java, "nordicnews_database")
+                Room.databaseBuilder(
+                    context,
+                    NordicNewsDatabase::class.java,
+                    "nordicnews_database"
+                )
                     .addTypeConverter(ArticleTypeConvertor())
                     .build()
                     .also { Instance = it }
Index: app/src/main/java/com/example/nordicnews/ui/detail/DetailViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/detail/DetailViewModel.kt b/app/src/main/java/com/example/nordicnews/ui/detail/DetailViewModel.kt
--- a/app/src/main/java/com/example/nordicnews/ui/detail/DetailViewModel.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/detail/DetailViewModel.kt	(date 1717278732193)
@@ -2,10 +2,6 @@
 
 import android.content.Context
 import android.content.Intent
-import android.util.Log
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.setValue
 import androidx.lifecycle.SavedStateHandle
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
@@ -17,16 +13,10 @@
 import com.example.nordicnews.R
 import com.example.nordicnews.data.ArticleRepository
 import com.example.nordicnews.data.models.Article
-import com.example.nordicnews.data.models.AssetParamType
-import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.SharingStarted
 import kotlinx.coroutines.flow.StateFlow
-import kotlinx.coroutines.flow.asStateFlow
-import kotlinx.coroutines.flow.filterNotNull
-import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.flow.map
 import kotlinx.coroutines.flow.stateIn
-import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 
 class DetailViewModel(
@@ -46,84 +36,24 @@
         }
     }
 
-    /*
-    var uiState by mutableStateOf(DetailUiSate())
-        private set
-
-     */
-    //var uiState = MutableStateFlow(DetailUiSate())
-      //  private set
-
     private val argumentArticleObject = checkNotNull(savedStateHandle.get<Article>("article"))
 
     val uiState: StateFlow<DetailUiState> =
-        articleRepository.getArticle(argumentArticleObject.url)
-            //.filterNotNull()
-            .map { article ->
-                if(article == null) {
-                    DetailUiState()
-                }
-                else{
-                    DetailUiState(article = article)
-                }
-        }
-            .stateIn(
-                scope = viewModelScope,
-                started = SharingStarted.WhileSubscribed(5_000),
-                initialValue = DetailUiState()
-            )
+        articleRepository.getArticle(argumentArticleObject.url).map { article ->
+            article?.let { DetailUiState(it) } ?: DetailUiState()
+        }.stateIn(
+            scope = viewModelScope,
+            started = SharingStarted.WhileSubscribed(5_000),
+            initialValue = DetailUiState()
+        )
 
-    /*
-    init {
-
-        Log.d("argument", argument.url)
-        viewModelScope.launch {
-            uiState.value = articleRepository.getArticle(argument.url)
-                .filterNotNull()
-                .first()
-                .toDetailUiState()
-        }
-    }
-
-     */
-
-    /**
-     * Holds current item ui state
-     */
-    // Backing property to avoid state updates from other classes
-    // private val _uiState = MutableStateFlow(DetailUiSate())
-    // val uiState: StateFlow<DetailUiSate> = _uiState.asStateFlow()
-
-    /*
-    var uiState = MutableStateFlow(DetailUiSate())
-        private set
-
-     */
-
-    suspend fun saveItem(article : Article) {
+    suspend fun saveItem(article: Article) {
         viewModelScope.launch {
             articleRepository.insertArticle(article)
         }
-
-        /*
-        uiState.update {currentUiState ->
-            currentUiState.copy(
-                isBookmarked = !(uiState.value.isBookmarked),
-                article = article
-            )
-        }
-        if(uiState.value.isBookmarked)
-        {
-            articleRepository.insertArticle(article)
-        }
-        else {
-
-            // Delete Api
-        }
-         */
     }
 
-    suspend fun deleteItem(article: Article){
+    suspend fun deleteItem(article: Article) {
         viewModelScope.launch {
             articleRepository.deleteArticle(article)
         }
@@ -142,11 +72,9 @@
     }
 }
 data class DetailUiState(
-    //val isBookmarked : Boolean = false,
     val article : Article = Article()
 )
 
 fun Article.toDetailUiState(): DetailUiState = DetailUiState(
-    //isBookmarked = isBookmarked,
     article = this
 )
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/detail/DetailScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/detail/DetailScreen.kt b/app/src/main/java/com/example/nordicnews/ui/detail/DetailScreen.kt
--- a/app/src/main/java/com/example/nordicnews/ui/detail/DetailScreen.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/detail/DetailScreen.kt	(date 1717279773698)
@@ -17,13 +17,10 @@
 import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.ArrowBack
-import androidx.compose.material.icons.filled.Favorite
-import androidx.compose.material.icons.filled.FavoriteBorder
 import androidx.compose.material3.BottomAppBar
 import androidx.compose.material3.CenterAlignedTopAppBar
 import androidx.compose.material3.Divider
 import androidx.compose.material3.ExperimentalMaterial3Api
-import androidx.compose.material3.FloatingActionButton
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
 import androidx.compose.material3.MaterialTheme
@@ -66,12 +63,9 @@
     override val route = "detail"
     const val ARTICLE_ARG = "article"
     val routeWithArgs = "${route}/{$ARTICLE_ARG}"
-
     override val titleRes = R.string.detail
-
     override val selectedIcon = R.drawable.ic_general
     override val unSelectedIcon = R.drawable.ic_general
-
 }
 
 @OptIn(ExperimentalMaterial3Api::class)
@@ -80,16 +74,11 @@
     navigateToDetailScreen : (Article) -> Unit,
     article : Article?,
     navController: NavController,
-    modifier: Modifier = Modifier,
     viewModel: DetailViewModel = viewModel(factory = DetailViewModel.Factory),
     navigateUp: () -> Unit = {}
 ) {
     val context = LocalContext.current
-    if(article == null)
-    {
-        Text(text = "Something went wrong!")
-    }
-    else {
+    article?.let {
         val uiState by viewModel.uiState.collectAsState()
         val coroutineScope = rememberCoroutineScope()
 
@@ -97,39 +86,51 @@
             topBar = {
                 CenterAlignedTopAppBar(
                     title = {
-                        Text(stringResource(id = DetailDestination.titleRes))
+                        Text(
+                            stringResource(id = DetailDestination.titleRes)
+                        )
                     },
                     actions = {
                         // RowScope here, so these icons will be placed horizontally
                         if (uiState.article.url == "") {
-                            IconButton(onClick = {
-                                coroutineScope.launch {
-                                    viewModel.saveItem(article)
+                            IconButton(
+                                onClick = {
+                                    coroutineScope.launch {
+                                        viewModel.saveItem(article)
+                                    }
                                 }
-                            }) {
+                            ) {
                                 Icon(
-                                    painter = painterResource(id = R.drawable.pin_hollow ) ,
-                                    contentDescription = null)
+                                    painter = painterResource(
+                                        id = R.drawable.pin_hollow
+                                    ),
+                                    contentDescription = null
+                                )
                             }
                         } else {
-                            IconButton(onClick = {
-                                coroutineScope.launch {
-                                    viewModel.deleteItem(article)
-                                    //navigateUp()
-                                    // To refresh screen
-                                    //navigateToDetailScreen(article)
+                            IconButton(
+                                onClick = {
+                                    coroutineScope.launch {
+                                        viewModel.deleteItem(article)
+                                    }
                                 }
-                            }) {
+                            ) {
                                 Icon(
-                                    painter = painterResource(id = R.drawable.pin ) ,
-                                    contentDescription = null)
+                                    painter = painterResource(
+                                        id = R.drawable.pin
+                                    ),
+                                    contentDescription = null
+                                )
                             }
                         }
 
-                        IconButton(onClick = { viewModel.shareOrder(context) }) {
+                        IconButton(
+                            onClick = { viewModel.shareOrder(context) }
+                        ) {
                             Icon(
-                                painter = painterResource(id = R.drawable.share ) ,
-                                contentDescription = null)
+                                painter = painterResource(id = R.drawable.share),
+                                contentDescription = null
+                            )
                         }
                     },
                     navigationIcon = {
@@ -150,14 +151,12 @@
                 }
             }
         ) { innerPadding ->
-
             LazyColumn(
-                modifier = Modifier
-                    .padding(innerPadding),
-            ){
+                modifier = Modifier.padding(innerPadding),
+            ) {
                 item {
                     Text(
-                        text = article.title ,
+                        text = article.title,
                         style = MaterialTheme.typography.headlineLarge,
                         fontWeight = FontWeight(400),
                         fontSize = 28.sp,
@@ -173,58 +172,39 @@
                 }
                 item {
                     AsyncImage(
-                        model = ImageRequest.Builder(context = LocalContext.current)
-                            .data(article.urlToImage)
-                            .build(),
+                        model = ImageRequest.Builder(
+                            context = LocalContext.current
+                        ).data(article.urlToImage).build(),
                         contentDescription = null,
                         error = painterResource(R.drawable.ic_broken_image),
                         placeholder = painterResource(R.drawable.loading_img),
-                        modifier = Modifier
-                            .fillMaxWidth()
-                            .height(220.dp),
-                            //.border(BorderStroke(2.dp, Color.Red)),
+                        modifier = Modifier.fillMaxWidth().height(220.dp),
                         contentScale = ContentScale.Crop
                     )
                 }
                 item {
                     DetailsRow(article = article)
                 }
-                item{
-
-                    Divider(color = Color(215, 215, 215),
-                        modifier =Modifier
-                        .padding(
-                            start = 25.dp,
-                            end = 25.dp,
-                            bottom = 20.dp
+                item {
+                    Divider(
+                        color = Color(215, 215, 215),
+                        modifier = Modifier.padding(
+                                start = 25.dp,
+                                end = 25.dp,
+                                bottom = 20.dp
                         ),
                         thickness = 1.dp
-                     )
+                    )
                 }
 
                 item {
-                    Column(modifier = Modifier.
-                    padding(start = 25.dp, end = 25.dp, bottom = 28.dp)) {
-                        /*
-                        Text(
-                            text = "AI in our products",
-                            fontSize = 20.sp,
-                            fontWeight = FontWeight(700),
-                            lineHeight = 28.sp,
-                            style = MaterialTheme.typography.headlineMedium,
-                            color = Color(29, 27, 32),
-                            modifier = Modifier.padding(top=20.dp,bottom=20.dp)
-                        )
-                        Text(
-                            text = "“Help me write” in Gmail",
-                            fontSize = 16.sp,
-                            fontWeight = FontWeight(500),
-                            lineHeight = 22.sp,
-                            style = MaterialTheme.typography.headlineSmall,
-                            color = Color(29, 27, 32),
-                            modifier = Modifier.padding(bottom=10.dp)
-                        )
-                         */
+                    Column(
+                        modifier = Modifier.padding(
+                        start = 25.dp,
+                        end = 25.dp,
+                        bottom = 28.dp
+                        )
+                    ) {
                         Text(
                             text = article.content,
                             fontSize = 15.sp,
@@ -237,8 +217,10 @@
                         )
                     }
                 }
-                item{
-                    Column(modifier = Modifier.padding(start=25.dp,end=25.dp)) {
+                item {
+                    Column(
+                        modifier = Modifier.padding(start=25.dp, end=25.dp)
+                    ) {
                         Text(
                             text = "Related article",
                             fontSize = 20.sp,
@@ -246,56 +228,24 @@
                             lineHeight = 28.sp,
                             style = MaterialTheme.typography.headlineMedium,
                             color = Color(29, 27, 32),
-                            modifier = Modifier.padding(bottom=20.dp),
-                            )
+                            modifier = Modifier.padding(bottom=20.dp)
+                        )
 
                         ArticleListV1(
-                            onItemClick = { navigateToDetailScreen(it)},
+                            onItemClick = { navigateToDetailScreen(it) },
                             // Mock Article Data
                             articles = ArticleMockData.articleList.takeLast(3)
-                            // Data from Api
-                            //articles = uiState.ArticleList,
-                            //modifier = Modifier.height(500.dp)
                         )
                     }
                 }
-                item { 
+                item {
                     Spacer(modifier = Modifier.height(84.dp))
                 }
             }
-            /*
-            DetailBodyV2(
-                //uiState = uiState,
-                article = article,
-                modifier = Modifier
-                    .padding(innerPadding))
-                /*
-                DetailBody(
-                    uiState = uiState,
-                    article = article,
-                    modifier = Modifier.padding(innerPadding))
-
-                 */
-            /*
-        Column(
-            modifier = Modifier
-                .padding(innerPadding),
-            verticalArrangement = Arrangement.spacedBy(16.dp),
-        ) {
-            Text(
-                // text = "Nordic News - ${stringResource(DetailDestination.titleRes)}",
-                text = "Nordic News - ${article.toString()}",
-                modifier = modifier
-            )
-        }
-*/
         }
-
-             */
-        }
+    } ?: run {
+        Text(text = "Something went wrong!")
     }
-
-
 }
 
 @Composable
@@ -304,55 +254,27 @@
     article : Article,
     modifier : Modifier = Modifier
 ) {
-    Box(modifier = modifier
-        .fillMaxWidth()
-        .border(BorderStroke(2.dp, Color.Red))
-        .height(100.dp)
+    Box(
+        modifier = modifier
+            .fillMaxWidth()
+            .border(BorderStroke(2.dp, Color.Red))
+            .height(100.dp)
     ) {
-    Column {
-        /*
-        AsyncImage(
-            model = ImageRequest.Builder(context = LocalContext.current) //samplePhoto.imgSrc,
-                .data(article.urlToImage)
-                .crossfade(true)
-                .build(),
-            //error = painterResource(R.drawable.ic_broken_image),
-            //placeholder = painterResource(R.drawable.loading_img),
-            contentDescription = stringResource(R.string.news_thumbnail),
-            contentScale = ContentScale.Crop,  // to cover whole screen
-            modifier = Modifier
-                .fillMaxWidth()
-            //.align(Alignment.Center)
-            //.clip(MaterialTheme.shapes.small)
-            //.size(width = 80.dp, height = 80.dp),
-        )
-
-         */
-
-        Text(
-            text = article.source.name,
-            fontSize = 16.sp,
-            fontWeight = FontWeight.Bold,
-            modifier = Modifier.padding(
-                //top= 4.dp,
-                //start = 8.dp,
-                //bottom = 8.dp
+        Column {
+            Text(
+                text = article.source.name,
+                fontSize = 16.sp,
+                fontWeight = FontWeight.Bold,
+                modifier = Modifier.padding()
             )
-        )
-        Text(
-            text = uiState.article.url,
-            fontSize = 16.sp,
-            fontWeight = FontWeight.Bold,
-            modifier = Modifier.padding(
-                //top= 4.dp,
-                //start = 8.dp,
-                //bottom = 8.dp
+            Text(
+                text = uiState.article.url,
+                fontSize = 16.sp,
+                fontWeight = FontWeight.Bold,
+                modifier = Modifier.padding()
             )
-        )
-
-
-    }
-}
+        }
+    }
 }
 
 @Composable
@@ -365,13 +287,12 @@
         .fillMaxWidth()
         .fillMaxSize()
         .border(BorderStroke(2.dp, Color.Red))
-        //.height(100.dp)
 
     ) {
-        Column(modifier
-            //.padding(8.dp)
-            //.verticalScroll(rememberScrollState())
-            .border(BorderStroke(2.dp, Color.Blue))
+        Column(
+            modifier = modifier.border(
+                BorderStroke(2.dp, Color.Blue)
+            )
         ) {
             Text(
                 text = article.title,
@@ -380,65 +301,28 @@
                 fontWeight = FontWeight.Bold,
                 textAlign = TextAlign.Justify,
                 modifier = Modifier.padding(16.dp)
-                )
+            )
 
-
             AsyncImage(
-                model = ImageRequest.Builder(context = LocalContext.current) //samplePhoto.imgSrc,
+                model = ImageRequest.Builder(
+                    context = LocalContext.current
+                )
                     .data(article.urlToImage)
                     .crossfade(true)
                     .build(),
-                //error = painterResource(R.drawable.ic_broken_image),
-                //placeholder = painterResource(R.drawable.loading_img),
                 contentDescription = stringResource(R.string.news_thumbnail),
                 contentScale = ContentScale.Crop,  // to cover whole screen
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .height(390.dp)
-                //.align(Alignment.Center)
-                //.clip(MaterialTheme.shapes.small)
-                //.size(width = 80.dp, height = 80.dp),
+                modifier = Modifier.fillMaxWidth().height(390.dp)
             )
-
-            /*
-            Text(
-                text = article.source.name,
-                fontSize = 16.sp,
-                fontWeight = FontWeight.Bold,
-                modifier = Modifier.padding(
-                    //top= 4.dp,
-                    //start = 8.dp,
-                    //bottom = 8.dp
-                )
-            )
-            Text(
-                text = uiState.article.url,
-                fontSize = 16.sp,
-                fontWeight = FontWeight.Bold,
-                modifier = Modifier.padding(
-                    //top= 4.dp,
-                    //start = 8.dp,
-                    //bottom = 8.dp
-                )
-            )
-
-             */
-
-
         }
     }
 }
 
 @Composable
-fun DetailBodyV2(article : Article,
-               modifier : Modifier = Modifier) {
+fun DetailBodyV2(article : Article) {
     LazyColumn(
         modifier = Modifier.fillMaxWidth(),
-        contentPadding = PaddingValues(
-            //start = 16.dp,
-            //end = 8.dp,
-            //top = 40.dp
-        ),
+        contentPadding = PaddingValues(),
         verticalArrangement = Arrangement.spacedBy(16.dp),
     ){
         item {
@@ -462,65 +346,59 @@
         }
         item {
             AsyncImage(
-                model = ImageRequest.Builder(context = LocalContext.current)
+                model = ImageRequest.Builder(
+                    context = LocalContext.current
+                )
                     .data(article.urlToImage)
                     .build(),
                 contentDescription = null,
                 modifier = Modifier
                     .fillMaxWidth()
                     .height(220.dp),
-                    //.clip(MaterialTheme.shapes.medium),
                 contentScale = ContentScale.Crop
             )
         }
-            //Spacer(modifier = Modifier.height(24.dp))
         item {
             DetailsRow(article)
         }
-            //Spacer(modifier = Modifier.height(24.dp))
         item {
             Text(
                 text = article.title,
                 style = MaterialTheme.typography.headlineMedium,
                 color = Color.Black,
                 modifier = Modifier.padding(start = 16.dp,end=16.dp)
-
             )
         }
-    item {
-            Text(
-                text = article.content,
-                style = MaterialTheme.typography.bodyMedium,
-                color = Color.Black,
-                modifier = Modifier.padding(start = 16.dp,end=16.dp)
-            )
-    }
-    item {
-            Text(
-                text = article.content,
-                style = MaterialTheme.typography.bodyMedium,
-                color = Color.Black,
-                modifier = Modifier.padding(start = 16.dp,end=16.dp)
-            )
-        }
-
+        item {
+                Text(
+                    text = article.content,
+                    style = MaterialTheme.typography.bodyMedium,
+                    color = Color.Black,
+                    modifier = Modifier.padding(start = 16.dp,end=16.dp)
+                )
+        }
+        item {
+                Text(
+                    text = article.content,
+                    style = MaterialTheme.typography.bodyMedium,
+                    color = Color.Black,
+                    modifier = Modifier.padding(start = 16.dp,end=16.dp)
+                )
+            }
     }
 }
 
 @Composable
-fun DetailsRow(article : Article,
-               modifier : Modifier = Modifier) {
+fun DetailsRow(article : Article) {
     Row(
         modifier = Modifier
             .fillMaxWidth()
             .padding(
-                //top = 32.dp,
                 start = 25.dp,
                 bottom = 19.dp,
                 end = 25.dp
             )
     ) {
-
         AsyncImage(
             model = ImageRequest.Builder(context = LocalContext.current)
                 .data(article.urlToImage)
@@ -528,12 +406,8 @@
             contentDescription = null,
             modifier = Modifier
                 .padding(top = 32.dp)
-                //.size(64.dp)
                 .size(width = 35.dp, height = 35.dp)
                 .clip(CircleShape),
-                //.border(BorderStroke(2.dp, Color.Red))
-                //.clip(MaterialTheme.shapes.small),
-                //.weight(1f),
             contentScale = ContentScale.Crop
         )
 
@@ -560,10 +434,7 @@
                     lineHeight = 17.41.sp,
                     color = Color(29, 27, 32),
                     style = MaterialTheme.typography.labelLarge,
-                    modifier = Modifier.padding(
-                        //start = 0.5.dp,
-                        //end = 0.5.dp
-                    )
+                    modifier = Modifier.padding()
                 )
                 Text(
                     text = "${getOffset(article.publishedAt)} ago",
Index: app/src/main/java/com/example/nordicnews/ui/shared/ArticleCard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/ArticleCard.kt b/app/src/main/java/com/example/nordicnews/ui/shared/ArticleCard.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/ArticleCard.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/ArticleCard.kt	(date 1717272496606)
@@ -1,50 +1,40 @@
 package com.example.nordicnews.ui.shared
 
-import androidx.compose.foundation.Image
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxHeight
-import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
 import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.items
 import androidx.compose.material3.Card
+import androidx.compose.material3.CardDefaults
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
-import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import com.example.nordicnews.R
-import com.example.nordicnews.data.models.Article
-import androidx.compose.foundation.lazy.items
-import androidx.compose.material3.CardDefaults
-import androidx.compose.material3.DatePickerDefaults
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.text.style.TextOverflow
 import coil.compose.AsyncImage
 import coil.request.ImageRequest
+import com.example.nordicnews.R
+import com.example.nordicnews.data.models.Article
 import com.example.nordicnews.data.models.ArticleMockData
 import com.example.nordicnews.data.models.Source
 import java.time.Duration
-import java.time.Instant
-import java.time.LocalDate
 import java.time.OffsetDateTime
-import java.util.Date
-import java.util.TimeZone
 
 
 @Composable
@@ -55,15 +45,17 @@
 @Composable
 fun ArticleList(
     onItemClick: (Article) -> Unit,
-    articles : List<Article>,
-    modifier : Modifier = Modifier) {
-    LazyColumn(modifier.height(500.dp),
-        verticalArrangement = Arrangement.spacedBy(20.dp)) {
-        items(articles){article ->
+    articles: List<Article>,
+    modifier: Modifier = Modifier
+) {
+    LazyColumn(
+        modifier = modifier.height(500.dp),
+        verticalArrangement = Arrangement.spacedBy(20.dp)
+    ) {
+        items(articles) { article ->
             ArticleCard(
                 article = article,
                 modifier = Modifier
-                    //.padding(4.dp)
                     .clickable { onItemClick(article) }
             )
         }
@@ -72,95 +64,92 @@
 
 @Composable
 fun ArticleListV1(
-    onItemClick: (Article) -> Unit,
-    articles : List<Article>,
-    modifier : Modifier = Modifier, ) {
-        articles.forEach{article ->
-            ArticleCard(
-                article = article,
-                modifier = Modifier
-                    .padding(bottom =20.dp)
-                    .clickable { onItemClick(article) }
-            )
-        }
+    onItemClick: (Article) -> Unit = {},
+    articles: List<Article>
+) {
+    articles.forEach { article ->
+        ArticleCard(
+            article = article,
+            modifier = Modifier
+                .padding(bottom = 20.dp)
+                .clickable { onItemClick(article) }
+        )
+    }
 }
 
 @Composable
 fun ArticleCard(article : Article,modifier: Modifier = Modifier) {
-    Card(modifier = modifier
-        .size(width =340.dp, height = 80.dp),
+    Card(
+        modifier = modifier.size(width = 340.dp, height = 80.dp),
         colors = CardDefaults.cardColors(
-            containerColor = Color.White,
-        )) {
+            containerColor = Color.White
+        )
+    ) {
         Row{
-                AsyncImage(
-                    model = ImageRequest.Builder(context = LocalContext.current)
-                        .data(article.urlToImage)
-                        .crossfade(true)
-                        .build(),
-                    error = painterResource(R.drawable.ic_broken_image),
-                    placeholder = painterResource(R.drawable.loading_img),
-                    contentDescription = stringResource(R.string.news_thumbnail),
-                    contentScale = ContentScale.FillHeight,  // to cover whole screen
-                    modifier = Modifier
-                        //.align(Alignment.Center)
-                        .clip(MaterialTheme.shapes.small)
-                        .size(width = 80.dp, height = 80.dp),
-                )
+            AsyncImage(
+                model = ImageRequest.Builder(context = LocalContext.current)
+                    .data(article.urlToImage)
+                    .crossfade(true)
+                    .build(),
+                error = painterResource(R.drawable.ic_broken_image),
+                placeholder = painterResource(R.drawable.loading_img),
+                contentDescription = stringResource(R.string.news_thumbnail),
+                contentScale = ContentScale.FillHeight,  // to cover whole screen
+                modifier = Modifier
+                    //.align(Alignment.Center)
+                    .clip(MaterialTheme.shapes.small)
+                    .size(width = 80.dp, height = 80.dp),
+            )
 
-                Column(modifier = Modifier
+            Column(
+                modifier = Modifier
                     .fillMaxWidth()
-                    .padding(top = 7.dp, start = 18.dp, bottom = 7.dp)) {
-                    Text(
-                        text = article.title ?: "",//sanitizeString(article.title),
-                        maxLines = 2,
-                        overflow = TextOverflow.Ellipsis,
-                        fontSize = 16.sp,
-                        fontWeight = FontWeight(500),
-                        lineHeight = 22.sp,
-                        style = MaterialTheme.typography.headlineSmall,
-                        color = Color(29, 27, 32),
-                        modifier = Modifier.padding(
-                            //top= 4.dp,
-                            //start = 8.dp,
-                            bottom = 5.dp
-                        )
-                    )
-                    //Text(text = beachName)
-                    Row{
-                        Text(
-                            text = article.source.name,
-                            fontSize = 14.sp,
-                            fontWeight = FontWeight(400),
-                            lineHeight = 17.41.sp,
-                            color = Color(29, 27, 32),
-                            modifier = Modifier.padding(
-                                end = 7.dp
-                            )
-                        )
-                        Text(
-                            text = "·",
-                            fontSize = 14.sp,
-                            fontWeight = FontWeight(400),
-                            lineHeight = 17.41.sp,
-                            color = Color(29, 27, 32),
-                            modifier = Modifier.padding(
-                                //start = 0.5.dp,
-                                //end = 0.5.dp
-                            )
-                        )
-                        Text(
-                            text = getOffset(article.publishedAt),
-                            fontSize = 14.sp,
-                            fontWeight = FontWeight(400),
-                            lineHeight = 17.41.sp,
-                            color = Color(29, 27, 32),
-                            modifier = Modifier.padding(
-                                start = 7.dp
-                            )
-                        )
-                    }
-                }
+                    .padding(top = 7.dp, start = 18.dp, bottom = 7.dp)
+            ) {
+                Text(
+                    text = article.title,
+                    maxLines = 2,
+                    overflow = TextOverflow.Ellipsis,
+                    fontSize = 16.sp,
+                    fontWeight = FontWeight(500),
+                    lineHeight = 22.sp,
+                    style = MaterialTheme.typography.headlineSmall,
+                    color = Color(29, 27, 32),
+                    modifier = Modifier.padding(
+                        bottom = 5.dp
+                    )
+                )
+                Row{
+                    Text(
+                        text = article.source.name,
+                        fontSize = 14.sp,
+                        fontWeight = FontWeight(400),
+                        lineHeight = 17.41.sp,
+                        color = Color(29, 27, 32),
+                        modifier = Modifier.padding(
+                            end = 7.dp
+                        )
+                    )
+                    Text(
+                        text = "·",
+                        fontSize = 14.sp,
+                        fontWeight = FontWeight(400),
+                        lineHeight = 17.41.sp,
+                        color = Color(29, 27, 32),
+                        modifier = Modifier.padding()
+                    )
+                    Text(
+                        text = getOffset(article.publishedAt),
+                        fontSize = 14.sp,
+                        fontWeight = FontWeight(400),
+                        lineHeight = 17.41.sp,
+                        color = Color(29, 27, 32),
+                        modifier = Modifier.padding(
+                            start = 7.dp
+                        )
+                    )
+                }
+            }
         }
     }
 }
@@ -174,37 +163,27 @@
     //val duration = Duration.between(OffsetDateTime.now(), offsetDateTime)
     val duration = Duration.between(offsetDateTime, OffsetDateTime.now())
     // get the difference in full days
-    var temp = ""
-    var year : Long = 0
-    var days : Long = 0
-    var month : Long = 0
-    var hours : Long = 0
-    var min : Long = 0
-
-    min = duration.toMinutes()
-    temp = "$min min"
-    if(min > 59)
-    {
-        hours = duration.toHours()
-        temp = "$hours hrs"
-    }
-    if(hours > 59)
-    {
-        days = duration.toDays()
-        temp = "$days days"
-    }
-    if(days > 30)
-    {
-        temp = "more then month"
-    }
-    if(days > 364)
-    {
-        temp = "more then year"
-    }
+    val days : Long = duration.toDays()
+    val hours : Long = duration.toHours()
+    val min = duration.toMinutes()
 
     // print the result as "days left"
     //println("$days days left")
-    return temp.toString()
+    return when {
+        min > 59 && hours < 59 -> {
+            "$hours hrs"
+        }
+        hours > 59 && days < 31 -> {
+            "$days days"
+        }
+        days in 31..363 -> {
+            "more than month"
+        }
+        days > 364 -> {
+            "more than year"
+        }
+        else -> "$min min"
+    }
 }
 
 private fun sanitizeString(value : String) : String {
@@ -246,6 +225,8 @@
 @Preview(showSystemUi = true)
 @Composable
 private fun ArticleCardPreview2() {
-    ArticleListV1(onItemClick = {}, articles = ArticleMockData.articleList)
+    ArticleListV1(
+        articles = ArticleMockData.articleList
+    )
 }
 
Index: app/src/main/java/com/example/nordicnews/ui/search/SearchScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/search/SearchScreen.kt b/app/src/main/java/com/example/nordicnews/ui/search/SearchScreen.kt
--- a/app/src/main/java/com/example/nordicnews/ui/search/SearchScreen.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/search/SearchScreen.kt	(date 1717277185900)
@@ -1,7 +1,5 @@
 package com.example.nordicnews.ui.search
 
-import android.os.Handler
-import android.util.Log
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
@@ -11,11 +9,9 @@
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.material3.BottomAppBar
-import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
-import androidx.compose.runtime.LaunchedEffect
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.ui.Alignment
@@ -49,7 +45,6 @@
 
 }
 
-@OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun SearchScreen(
     navigateToDetailScreen : (Article) -> Unit,
@@ -79,51 +74,53 @@
             }
         }
     ) { innerPadding ->
-        when(uiState.searchApiState) {
-         SearchApiState.LOADING -> LoadingScreen(modifier = Modifier.fillMaxSize())
-         SearchApiState.SUCCESS -> SearchResult(
-                topic = uiState.category,
-                navigateToDetailScreen = navigateToDetailScreen,
-                articles = uiState.articleList,
-                modifier = Modifier.padding(innerPadding)
-            )
-        SearchApiState.ERROR ->    ErrorScreen( modifier = Modifier.fillMaxSize())
-         SearchApiState.NONE ->
-                Text(text = "No result found!",modifier = Modifier.padding(innerPadding).padding(15.dp))
-            else ->
-                Text(text = "Else")   // For Otherwise
+        when (uiState.searchApiState) {
+             SearchApiState.LOADING -> LoadingScreen(
+                 modifier = Modifier.fillMaxSize()
+             )
+             SearchApiState.SUCCESS -> SearchResult(
+                    topic = uiState.category,
+                    navigateToDetailScreen = navigateToDetailScreen,
+                    articles = uiState.articleList
+                )
+             SearchApiState.ERROR -> ErrorScreen(
+                 modifier = Modifier.fillMaxSize()
+             )
+             SearchApiState.NONE -> Text(
+                text = "No result found!",
+                modifier = Modifier.padding(innerPadding).padding(15.dp)
+             )
         }
-
     }
 }
 
 @Composable
-fun SearchResult(modifier : Modifier = Modifier,
-                 topic : String,
-                 navigateToDetailScreen :(Article) -> Unit,
-                 articles : List<Article>) {
-    LazyColumn(){
+fun SearchResult(
+    topic : String,
+    navigateToDetailScreen :(Article) -> Unit,
+    articles : List<Article>
+) {
+    LazyColumn {
         item { Spacer(modifier = Modifier.height(60.dp)) }
-
         item {
-            Row(horizontalArrangement = Arrangement.Center,
-                verticalAlignment = Alignment.CenterVertically) {
+            Row(
+                horizontalArrangement = Arrangement.Center,
+                verticalAlignment = Alignment.CenterVertically
+            ) {
                 Text(
                     text = "My Topic: $topic",
-                    fontWeight = FontWeight.Bold,
+                    fontWeight = FontWeight.Bold
                 )
             }
         }
         item { Spacer(modifier = Modifier.height(20.dp)) }
 
         item {
-            Column(modifier = Modifier.padding(start = 25.dp,end = 25.dp)) {
+            Column(
+                modifier = Modifier.padding(start = 25.dp,end = 25.dp)
+            ) {
                 ArticleListV1(
                     onItemClick = { navigateToDetailScreen(it) },
-                    // Mock Article Data
-                    //articles = ArticleMockData.articleList
-
-                    // Data from Api
                     articles = articles,
                 )
             }
Index: app/src/main/java/com/example/nordicnews/ui/search/OpenSearchBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/search/OpenSearchBar.kt b/app/src/main/java/com/example/nordicnews/ui/search/OpenSearchBar.kt
--- a/app/src/main/java/com/example/nordicnews/ui/search/OpenSearchBar.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/search/OpenSearchBar.kt	(date 1717275756171)
@@ -35,7 +35,6 @@
         modifier = Modifier
             .fillMaxWidth()
             .height(56.dp),
-        //elevation = AppBarDefaults.TopAppBarElevation,
         color = MaterialTheme.colorScheme.primary
     ) {
         TextField(
@@ -46,7 +45,6 @@
             placeholder = {
                 Text(
                     modifier = modifier,
-                    //.alpha(ContentAlpha.medium),
                     text = "Search here...",
                     color = Color.White
                 )
@@ -107,9 +105,8 @@
                 focusedContainerColor = Color.Transparent,
                 unfocusedContainerColor = Color.Transparent,
                 disabledContainerColor = Color.Transparent,
-                cursorColor = Color.Red,
+                cursorColor = Color.Red
             )
         )
-
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/search/SearchViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/search/SearchViewModel.kt b/app/src/main/java/com/example/nordicnews/ui/search/SearchViewModel.kt
--- a/app/src/main/java/com/example/nordicnews/ui/search/SearchViewModel.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/search/SearchViewModel.kt	(date 1717276764642)
@@ -11,13 +11,8 @@
 import com.example.nordicnews.NordicNewsApplication
 import com.example.nordicnews.data.models.Article
 import com.example.nordicnews.data.network.ApiRepository
-import com.example.nordicnews.dataStore.UserPreferencesRepository
 import kotlinx.coroutines.delay
 import kotlinx.coroutines.flow.MutableStateFlow
-import kotlinx.coroutines.flow.SharingStarted
-import kotlinx.coroutines.flow.StateFlow
-import kotlinx.coroutines.flow.filter
-import kotlinx.coroutines.flow.stateIn
 import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 
@@ -29,32 +24,39 @@
     companion object {
         val Factory: ViewModelProvider.Factory = viewModelFactory {
             initializer {
-                val application = (this[ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY] as NordicNewsApplication)
+                val application = this[
+                    ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY
+                ] as NordicNewsApplication
                 val apiRepository = application.container.apiRepository
                 val savedStateHandle = this.createSavedStateHandle()
-                SearchViewModel(savedStateHandle,apiRepository = apiRepository)
+                SearchViewModel(
+                    savedStateHandle = savedStateHandle,
+                    apiRepository = apiRepository
+                )
             }
         }
     }
 
-    private val category: String? = savedStateHandle[SearchDestination.CATEGORY_ARG]
+    private val category: String? = savedStateHandle[
+        SearchDestination.CATEGORY_ARG
+    ]
 
     var uiState = MutableStateFlow(SearchUiState())
         private set
 
     fun onNameChange(value : String) {
-        
-        uiState.update {currentUiState ->
+        uiState.update { currentUiState ->
             currentUiState.copy(
                 name = value
             )
         }
     }
-    fun getFilteredNews(sources : String = "ars-technica",//"the-verge",//"bbc-news",
-                   page : Int= 1){
+    private fun getFilteredNews(
+        sources : String = "ars-technica"
+    ) {
         viewModelScope.launch {
             try {
-                uiState.update {currentUiState ->
+                uiState.update { currentUiState ->
                     currentUiState.copy(
                         searchApiState = SearchApiState.LOADING
                     )
@@ -63,15 +65,14 @@
 
                 val allNews = apiRepository.getHeadlinesByCountryAndCategoryV1(sources)
 
-                uiState.update {currentUiState ->
+                uiState.update { currentUiState ->
                     currentUiState.copy(
                         articleList = allNews.articles,
                         searchApiState = SearchApiState.SUCCESS
                     )
                 }
-            }//catch (e: IOException) {
-            catch (ex : Exception) {
-                uiState.update {currentUiState ->
+            } catch (_ : Exception) {
+                uiState.update { currentUiState ->
                     currentUiState.copy(
                         searchApiState = SearchApiState.ERROR
                     )
@@ -81,8 +82,7 @@
     }
 
     fun updateSearchWidgetState(newValue: SearchWidgetState) {
-
-        uiState.update {currentUiState ->
+        uiState.update { currentUiState ->
             currentUiState.copy(
                 searchWidgetState = newValue
             )
@@ -92,34 +92,31 @@
     fun searchNews(keyword : String) {
         viewModelScope.launch {
             try {
-                uiState.update {currentUiState ->
+                uiState.update { currentUiState ->
                     currentUiState.copy(
                         searchApiState = SearchApiState.LOADING
                     )
-
                 }
                 val allNews = apiRepository.searchNewsV2(keyword)
                 Log.d("AllNews", "${allNews.totalResults} no.of news")
-                uiState.update {currentUiState ->
+                uiState.update { currentUiState ->
                     currentUiState.copy(
                         articleList = allNews.articles,
                         searchApiState = SearchApiState.SUCCESS
                     )
                 }
-            }catch (ex : Exception){
-                uiState.update {currentUiState ->
+            } catch (_ : Exception){
+                uiState.update { currentUiState ->
                     currentUiState.copy(
                         searchApiState = SearchApiState.ERROR
                     )
-
                 }
             }
         }
     }
 
     init {
-
-        if(category != null) {
+        if (category != null) {
             uiState.update { currentUiState ->
                 currentUiState.copy(
                     category = category,
Index: app/src/main/java/com/example/nordicnews/ui/search/ClosedAppBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/search/ClosedAppBar.kt b/app/src/main/java/com/example/nordicnews/ui/search/ClosedAppBar.kt
--- a/app/src/main/java/com/example/nordicnews/ui/search/ClosedAppBar.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/search/ClosedAppBar.kt	(date 1717275673499)
@@ -15,17 +15,17 @@
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun ClosedAppBar(onSearchIconClicked: () -> Unit) {
-    TopAppBar(title = {
-        Text(text = stringResource(id = R.string.app_name))
-    },
+    TopAppBar(
+        title = {
+            Text(text = stringResource(id = R.string.app_name))
+        },
         actions = {
             IconButton(onClick = { onSearchIconClicked() }) {
                 Icon(
-                    imageVector = Icons.Filled.Search ,
+                    imageVector = Icons.Filled.Search,
                     contentDescription = "SearchIcon",
                     tint = Color.Black
                 )
-
             }
         }
     )
Index: app/src/main/java/com/example/nordicnews/ui/search/SearchTopAppBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/search/SearchTopAppBar.kt b/app/src/main/java/com/example/nordicnews/ui/search/SearchTopAppBar.kt
--- a/app/src/main/java/com/example/nordicnews/ui/search/SearchTopAppBar.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/search/SearchTopAppBar.kt	(date 1717276213112)
@@ -11,14 +11,12 @@
     onSearchClicked: (String) -> Unit,
     onSearchTriggered: () -> Unit
 ) {
-
     when(searchWidgetState) {
         SearchWidgetState.CLOSED -> {
             ClosedAppBar(
                 onSearchIconClicked = onSearchTriggered
             )
         }
-
         SearchWidgetState.OPENED -> {
             OpenSearchBar(
                 text = searchTextState ,
Index: app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardListWithText.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardListWithText.kt b/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardListWithText.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardListWithText.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardListWithText.kt	(date 1717275202397)
@@ -1,52 +1,37 @@
 package com.example.nordicnews.ui.shared
 
-import androidx.compose.foundation.BorderStroke
-import androidx.compose.foundation.Image
-import androidx.compose.foundation.background
-import androidx.compose.foundation.border
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxHeight
-import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
-import androidx.compose.foundation.layout.sizeIn
 import androidx.compose.foundation.layout.wrapContentHeight
 import androidx.compose.foundation.lazy.grid.GridCells
 import androidx.compose.foundation.lazy.grid.LazyHorizontalGrid
+import androidx.compose.foundation.lazy.grid.items
 import androidx.compose.material3.Card
+import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.ColorFilter
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.unit.dp
-import com.example.nordicnews.R
-import androidx.compose.foundation.lazy.grid.items
-import androidx.compose.foundation.lazy.grid.itemsIndexed
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.material3.CardDefaults
-import androidx.compose.material3.MaterialTheme
 import androidx.compose.ui.draw.clip
-import androidx.compose.ui.graphics.SolidColor
+import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import coil.compose.AsyncImage
 import coil.request.ImageRequest
+import com.example.nordicnews.R
 import com.example.nordicnews.data.models.Article
 import com.example.nordicnews.data.models.ArticleMockData
 
@@ -55,44 +40,35 @@
 fun CardWithImageAndText(article : Article, modifier : Modifier = Modifier) {
 
         Row(modifier = Modifier.wrapContentHeight(align = Alignment.Top)
-            //.size(100.dp,100.dp)
-            //.border(BorderStroke(2.dp, SolidColor(Color.Red))),
-            //horizontalArrangement = Arrangement.spacedBy(10.dp),
         ) {
             Card(
-                modifier = modifier
-                    //.height(80.dp)
-                    //.padding(8.dp)
-                    //.sizeIn(minWidth = 100.dp, minHeight = 100.dp)
-                    .size(width =330.dp, height = 80.dp)
-                ,
-                //.background(listOfColor.random()),
+                modifier = modifier.size(
+                    width = 330.dp,
+                    height = 80.dp
+                ),
                 colors = CardDefaults.cardColors(
                     containerColor = Color.White,
-                ),
-                //elevation = CardDefaults.cardElevation(defaultElevation = 20.dp),
-                //shape = RoundedCornerShape(50.dp)
+                )
             ) {
-                Row{
+                Row {
                     AsyncImage(
-                        model = ImageRequest.Builder(context = LocalContext.current) //samplePhoto.imgSrc,
+                        model = ImageRequest.Builder(context = LocalContext.current)
                             .data(article.urlToImage)
                             .crossfade(true)
                             .build(),
-                        //error = painterResource(R.drawable.ic_broken_image),
-                        //placeholder = painterResource(R.drawable.loading_img),
                         contentDescription = stringResource(R.string.news_thumbnail),
                         contentScale = ContentScale.FillHeight,  // to cover whole screen
                         modifier = Modifier
-                            //.align(Alignment.Center)
                             .clip(MaterialTheme.shapes.small)
-                            .size(width = 80.dp, height = 80.dp),
+                            .size(width = 80.dp, height = 80.dp)
                     )
-                    Column(modifier = Modifier
-                        .fillMaxWidth()
-                        .padding(top = 7.dp, start = 18.dp, bottom = 7.dp)) {
+                    Column(
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .padding(top = 7.dp, start = 18.dp, bottom = 7.dp)
+                    ) {
                         Text(
-                            text = article.title ?: "",//sanitizeString(article.title),
+                            text = article.title,
                             maxLines = 2,
                             overflow = TextOverflow.Ellipsis,
                             fontSize = 16.sp,
@@ -101,13 +77,10 @@
                             style = MaterialTheme.typography.headlineSmall,
                             color = Color(29, 27, 32),
                             modifier = Modifier.padding(
-                                //top= 4.dp,
-                                //start = 8.dp,
                                 bottom = 5.dp
                             )
                         )
-                        //Text(text = beachName)
-                        Row{
+                        Row {
                             Text(
                                 text = article.source.name,
                                 fontSize = 14.sp,
@@ -124,10 +97,7 @@
                                 fontWeight = FontWeight(400),
                                 lineHeight = 17.41.sp,
                                 color = Color(29, 27, 32),
-                                modifier = Modifier.padding(
-                                    //start = 0.5.dp,
-                                    //end = 0.5.dp
-                                )
+                                modifier = Modifier.padding()
                             )
                             Text(
                                 text = getOffset(article.publishedAt),
@@ -149,11 +119,8 @@
 @Composable
 fun HorizontalCardListWithText(
     onItemClick: (Article) -> Unit,
-    articles : List<Article>,modifier : Modifier = Modifier) {
-    val listOfItems = mutableListOf(
-       "BBC","ABP","Technology","Sports"
-    )
-
+    articles : List<Article>
+) {
     Column {
         Text(
             text = "Focus On AI",
@@ -174,17 +141,6 @@
             horizontalArrangement = Arrangement.spacedBy(10.dp),
             verticalArrangement = Arrangement.spacedBy(20.dp)
         ) {
-            /*
-            itemsIndexed(listOfItems) { i, item ->
-                CardWithImageAndText(
-                    article = item,
-                    modifier = Modifier.padding(4.dp),
-                    backgroundColor = listOfColorForBackground[i],
-                    textColor = listOfColorForText[i]
-                )
-            }
-
-             */
             items(articles){ article ->
                 CardWithImageAndText(
                     article = article,
@@ -193,7 +149,6 @@
             }
         }
     }
-    
 }
 
 @Preview(showSystemUi = true)
Index: app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardList.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardList.kt b/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardList.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardList.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/HorizontalCardList.kt	(date 1717274840455)
@@ -11,54 +11,51 @@
 import androidx.compose.foundation.layout.wrapContentHeight
 import androidx.compose.foundation.lazy.grid.GridCells
 import androidx.compose.foundation.lazy.grid.LazyHorizontalGrid
+import androidx.compose.foundation.lazy.grid.itemsIndexed
 import androidx.compose.material3.Card
+import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.unit.dp
-import androidx.compose.foundation.lazy.grid.itemsIndexed
-import androidx.compose.material3.CardDefaults
-import androidx.compose.material3.MaterialTheme
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import com.example.nordicnews.data.models.Article
 import com.example.nordicnews.data.models.Category
 
 @Composable
-fun CardShower(categoryName: String, modifier: Modifier= Modifier,backgroundColor : Color,textColor : Color) {
+fun CardShower(
+    categoryName: String,
+    modifier: Modifier = Modifier,
+    backgroundColor: Color,
+    textColor: Color
+) {
     Row(modifier = Modifier.wrapContentHeight(align = Alignment.Top),
-        //.border(BorderStroke(2.dp, SolidColor(Color.Red))),
         horizontalArrangement = Arrangement.spacedBy(10.dp),
     ) {
         Card(
-            modifier = modifier
-                .size(100.dp)
-            ,
+            modifier = modifier.size(100.dp),
             colors = CardDefaults.cardColors(
-                containerColor = backgroundColor,
-            ),
+                containerColor = backgroundColor
+            )
         ) {
-                Column {
-                    Spacer(modifier = Modifier.weight(2f))
-
+            Column {
+                Spacer(modifier = Modifier.weight(2f))
                 Text(
-                        text = categoryName,
-                        fontSize = 16.sp,
-                        lineHeight = 22.sp,
-                        fontWeight = FontWeight(500),
-                        style = MaterialTheme.typography.headlineSmall,
-                    modifier = Modifier
-                        .padding(
-                            //top = 66.dp,
-                            bottom =12.dp,
-                            start = 10.dp,
-                            //end = 69.dp
-                        ),
-                        color = textColor
-                    )
+                    text = categoryName,
+                    fontSize = 16.sp,
+                    lineHeight = 22.sp,
+                    fontWeight = FontWeight(500),
+                    style = MaterialTheme.typography.headlineSmall,
+                    modifier = Modifier.padding(
+                        bottom =12.dp,
+                        start = 10.dp
+                    ),
+                    color = textColor
+                )
             }
         }
     }
@@ -66,24 +63,15 @@
 
 @Composable
 fun ColorfulTabsList(
-    modifier : Modifier = Modifier,
     category : List<Category>,
     onCardClick: (String) -> Unit,
     ) {
-    val listOfColorForBackground =
-        listOf(
-            Color(226, 237, 255),
-            Color(255, 224, 222),
-            Color(225, 242, 229),
-            Color(255, 245, 217)
-        )
-    val listOfColorForText =
-        listOf(
-            Color(61, 138, 255),
-            Color(255, 47, 33),
-            Color(56, 168, 82),
-            Color(255, 187, 0)
-        )
+    val listOfColors = listOf(
+        Color(61, 138, 255),
+        Color(255, 47, 33),
+        Color(56, 168, 82),
+        Color(255, 187, 0)
+    )
     Column {
         Text(
             text = "Topics",
@@ -104,23 +92,19 @@
                 .padding(start = 25.dp),
             rows = GridCells.Fixed(1)
         ) {
-            //itemsIndexed(listOfItems) { i, item ->
             itemsIndexed(category) { i, item ->
                 CardShower(
                     categoryName = item.category,
-                    backgroundColor = listOfColorForBackground[i],
-                    textColor = listOfColorForText[i],
+                    backgroundColor = listOfColors[i].copy(0.2f),
+                    textColor = listOfColors[i],
                     modifier = Modifier.padding(4.dp)
                         .clickable { onCardClick(item.category) }
                 )
             }
         }
     }
-    
 }
 
 @Preview
 @Composable
-private fun ColorfulTabsListPreview() {
-    //ColorfulTabsList(category = List<Category>(3))
-}
\ No newline at end of file
+private fun ColorfulTabsListPreview() {}
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/shared/SettingsSwitch.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/SettingsSwitch.kt b/app/src/main/java/com/example/nordicnews/ui/shared/SettingsSwitch.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/SettingsSwitch.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/SettingsSwitch.kt	(date 1717277185904)
@@ -1,7 +1,5 @@
 package com.example.nordicnews.ui.shared
 
-import androidx.annotation.DrawableRes
-import androidx.annotation.StringRes
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
@@ -17,13 +15,10 @@
 import androidx.compose.material3.Switch
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
-import androidx.compose.runtime.State
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.vector.ImageVector
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
 
Index: app/src/main/java/com/example/nordicnews/ui/shared/CustomBottomBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/CustomBottomBar.kt b/app/src/main/java/com/example/nordicnews/ui/shared/CustomBottomBar.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/CustomBottomBar.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/CustomBottomBar.kt	(date 1717273790353)
@@ -5,15 +5,12 @@
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.material3.Icon
-import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.getValue
@@ -32,11 +29,11 @@
 import androidx.navigation.NavGraph.Companion.findStartDestination
 import androidx.navigation.NavHostController
 import androidx.navigation.compose.currentBackStackEntryAsState
-import androidx.navigation.compose.rememberNavController
 import com.example.nordicnews.ui.bookmark.BookmarksDestination
 import com.example.nordicnews.ui.home.HomeDestination
 import com.example.nordicnews.ui.navigation.NavigationDestination
 import com.example.nordicnews.ui.search.SearchDestination
+import com.example.nordicnews.utils.popAndLaunchSingleTop
 
 @Composable
 fun CustomBottomBar(navController: NavController) {
@@ -65,7 +62,6 @@
             )
         }
     }
-
 }
 
 @Composable
@@ -74,25 +70,30 @@
     currentDestination: NavDestination?,
     navController: NavController
 ) {
-    val selected = currentDestination?.hierarchy?.any { it.route == screen.route } == true
+    val selected = currentDestination?.hierarchy?.any {
+        it.route == screen.route
+    } == true
 
-    val background =
-        if (selected) Color.Red.copy(alpha = 0.6f) else Color.Transparent
+    val background = Color.Red.copy(alpha = 0.6f).takeIf {
+        selected
+    } ?: Color.Transparent
 
-    val contentColor =
-        if (selected) Color.White else Color.Black
+    val contentColor = Color.White.takeIf {
+        selected
+    } ?: Color.Black
 
     Box(
         modifier = Modifier
             .height(40.dp)
             .clip(CircleShape)
             .background(background)
-            .clickable(onClick = {
-                navController.navigate(screen.route) {
-                    popUpTo(navController.graph.findStartDestination().id)
-                    launchSingleTop = true
+            .clickable(
+                onClick = {
+                    navController.navigate(screen.route) {
+                        popAndLaunchSingleTop(navController)
+                    }
                 }
-            })
+            )
     ) {
         Row(
             modifier = Modifier
@@ -101,7 +102,11 @@
             horizontalArrangement = Arrangement.spacedBy(4.dp)
         ) {
             Icon(
-                painter = painterResource(id = if (selected) screen.selectedIcon else screen.unSelectedIcon),
+                painter = painterResource(
+                    id = screen.selectedIcon.takeIf {
+                        selected
+                    } ?: screen.unSelectedIcon
+                ),
                 contentDescription = "icon",
                 tint = contentColor
             )
@@ -118,5 +123,7 @@
 @Composable
 @Preview(showSystemUi = true)
 fun BottomNavPreview() {
-    CustomBottomBar(navController = NavHostController(LocalContext.current))
+    CustomBottomBar(
+        navController = NavHostController(LocalContext.current)
+    )
 }
Index: app/src/main/java/com/example/nordicnews/ui/shared/ErrorScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/ErrorScreen.kt b/app/src/main/java/com/example/nordicnews/ui/shared/ErrorScreen.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/ErrorScreen.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/ErrorScreen.kt	(date 1717272701489)
@@ -4,7 +4,6 @@
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.layout.size
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Alignment
@@ -22,8 +21,14 @@
         horizontalAlignment = Alignment.CenterHorizontally
     ) {
         Image(
-            painter = painterResource(id = R.drawable.ic_connection_error), contentDescription = ""
+            painter = painterResource(
+                id = R.drawable.ic_connection_error
+            ),
+            contentDescription = ""
         )
-        Text(text = stringResource(R.string.loading_failed), modifier = Modifier.padding(16.dp))
+        Text(
+            text = stringResource(R.string.loading_failed),
+            modifier = Modifier.padding(16.dp)
+        )
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/shared/Footer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/Footer.kt b/app/src/main/java/com/example/nordicnews/ui/shared/Footer.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/Footer.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/Footer.kt	(date 1717274384881)
@@ -10,7 +10,6 @@
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
-import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.getValue
@@ -20,20 +19,19 @@
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavController
 import androidx.navigation.NavDestination
 import androidx.navigation.NavDestination.Companion.hierarchy
-import androidx.navigation.NavGraph.Companion.findStartDestination
 import androidx.navigation.compose.currentBackStackEntryAsState
 import com.example.nordicnews.R
 import com.example.nordicnews.ui.bookmark.BookmarksDestination
 import com.example.nordicnews.ui.home.HomeDestination
 import com.example.nordicnews.ui.navigation.NavigationDestination
 import com.example.nordicnews.ui.search.SearchDestination
+import com.example.nordicnews.utils.popAndLaunchSingleTop
 
 object BottomBar {
     val Items = listOf(
@@ -45,29 +43,27 @@
 
 @Composable
 fun Footer(
-    navController: NavController,
-    modifier : Modifier = Modifier
+    navController: NavController
 ) {
     val navBackStackEntry by navController.currentBackStackEntryAsState()
     val currentDestination = navBackStackEntry?.destination
 
-    Row(modifier = Modifier
-        .fillMaxWidth()
-        .padding(
-            //top = 10.dp,
-            start = 15.dp,
-            //end = 5.dp
-        )
-        .background(Color(0xfff7faff)),
+    Row(
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(
+                start = 15.dp
+            )
+            .background(Color(0xfff7faff)),
         horizontalArrangement = Arrangement.spacedBy(80.dp),
         verticalAlignment = Alignment.Bottom
     ) {
-        BottomBar.Items.forEach{item ->
+        BottomBar.Items.forEach { item ->
             FooterItem(
                 screen = item,
-                currentDestination = currentDestination ,
-                navController = navController)
-
+                currentDestination = currentDestination,
+                navController = navController
+            )
         }
     }
 }
@@ -78,54 +74,55 @@
     currentDestination: NavDestination?,
     navController: NavController
 ) {
-    val selected = currentDestination?.hierarchy?.any { it.route == screen.route } == true
+    val selected = currentDestination?.hierarchy?.any {
+        it.route == screen.route
+    } == true
 
     Box(
         modifier = Modifier
             .height(70.dp)
-            .clickable(onClick = {
-                navController.navigate(screen.route) {
-                    popUpTo(navController.graph.findStartDestination().id)
-                    launchSingleTop = true
+            .clickable(
+                onClick = {
+                    navController.navigate(screen.route) {
+                        popAndLaunchSingleTop(navController)
+                    }
                 }
-            })
+            )
             .padding(top = 10.dp)
     ) {
-        Column(modifier = Modifier
-            .padding(
-                //start=25.dp,
-                //end=25.dp
-                ),
+        Column(
+            modifier = Modifier.padding(),
             verticalArrangement = Arrangement.Center,
             horizontalAlignment = Alignment.CenterHorizontally
         ) {
             Image(
-                painter =
-                if (selected)
-                    painterResource(id = screen.selectedIcon)
-                else
-                    painterResource(id = screen.unSelectedIcon)
-                ,
-                contentDescription = stringResource(id = screen.titleRes),
-                modifier = Modifier.padding(
-                    //start = 9.dp,
-                    //end = 9.dp
-                )
+                painter = painterResource(id = screen.selectedIcon).takeIf {
+                    selected
+                } ?: painterResource(id = screen.unSelectedIcon),
+                contentDescription = stringResource(
+                    id = screen.titleRes
+                ),
+                modifier = Modifier.padding()
             )
             Text(
-                text = stringResource(id = screen.titleRes),
-                //fontWeight = FontWeight(500),
+                text = stringResource(
+                    id = screen.titleRes
+                ),
                 fontSize = 14.sp,
                 lineHeight = 20.sp,
                 modifier = Modifier
                     .padding(bottom = 11.dp)
                     .align(Alignment.CenterHorizontally),
-                color = if(selected) Color(61, 138, 255) else Color(29, 27, 32)
+                color = Color(61, 138, 255).takeIf {
+                    selected
+                } ?: Color(29, 27, 32)
             )
-            if(selected) {
+            if (selected) {
                 Image(
-                    painter = painterResource(id = R.drawable.indicator),
-                    contentDescription = "indicator",
+                    painter = painterResource(
+                        id = R.drawable.indicator
+                    ),
+                    contentDescription = "indicator"
                 )
             }
         }
@@ -135,5 +132,7 @@
 @Preview(showSystemUi = true)
 @Composable
 private fun FooterPreview() {
-    Footer(navController = NavController(LocalContext.current))
+    Footer(
+        navController = NavController(LocalContext.current)
+    )
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/shared/FixedHeader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/FixedHeader.kt b/app/src/main/java/com/example/nordicnews/ui/shared/FixedHeader.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/FixedHeader.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/FixedHeader.kt	(date 1717272896244)
@@ -3,7 +3,6 @@
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxHeight
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
@@ -15,7 +14,6 @@
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.text.buildAnnotatedString
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
@@ -25,16 +23,17 @@
 import com.example.nordicnews.data.models.Article
 
 @Composable
-fun FixedHeader(article : Article,
-                onItemClick : (Article) -> Unit,
-                modifier : Modifier = Modifier
+fun FixedHeader(
+    article : Article,
+    onItemClick : (Article) -> Unit,
+    modifier : Modifier = Modifier
 ) {
-    Column(modifier.height(390.dp)){
+    Column(modifier.height(390.dp)) {
 
         AsyncImage(
-            model = ImageRequest.Builder(context = LocalContext.current)
-                .data(article.urlToImage)
-                .build(),
+            model = ImageRequest.Builder(
+                context = LocalContext.current
+            ).data(article.urlToImage).build(),
             contentDescription = "Fixed Header Async Image",
             error = painterResource(R.drawable.ic_broken_image),
             placeholder = painterResource(R.drawable.loading_img),
@@ -44,12 +43,14 @@
                 .clickable { onItemClick(article) },
             contentScale = ContentScale.Crop
         )
-        Row(modifier = Modifier.padding(
-            start = 25.dp,
-            end=25.dp,
-            bottom = 9.dp,
-            top = 20.dp
-        )){
+        Row(
+            modifier = Modifier.padding(
+                start = 25.dp,
+                end=25.dp,
+                bottom = 9.dp,
+                top = 20.dp
+            )
+        ) {
             Text(
                 text = article.source.name,
                 fontSize = 14.sp,
@@ -67,10 +68,7 @@
                 fontWeight = FontWeight(400),
                 lineHeight = 17.41.sp,
                 color = Color(29, 27, 32),
-                modifier = Modifier.padding(
-                    //start = 0.5.dp,
-                    //end = 0.5.dp
-                )
+                modifier = Modifier.padding()
             )
             Text(
                 text = getOffset(article.publishedAt),
@@ -96,8 +94,6 @@
                 top=9.dp
             )
             .clickable { onItemClick(article) }
-            ,
         )
-        // }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/shared/BottomNavigationBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/shared/BottomNavigationBar.kt b/app/src/main/java/com/example/nordicnews/ui/shared/BottomNavigationBar.kt
--- a/app/src/main/java/com/example/nordicnews/ui/shared/BottomNavigationBar.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/shared/BottomNavigationBar.kt	(date 1717273790347)
@@ -1,14 +1,12 @@
 package com.example.nordicnews.ui.shared
 
 import androidx.compose.material3.Icon
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.navigation.NavController
-import androidx.navigation.compose.currentBackStackEntryAsState
 import androidx.compose.material3.NavigationBar
 import androidx.compose.material3.NavigationBarItem
 import androidx.compose.material3.NavigationBarItemDefaults
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.drawBehind
 import androidx.compose.ui.geometry.Offset
@@ -19,10 +17,10 @@
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
+import androidx.navigation.NavController
 import androidx.navigation.NavHostController
-import com.example.nordicnews.ui.bookmark.BookmarksDestination
-import com.example.nordicnews.ui.home.HomeDestination
-import com.example.nordicnews.ui.search.SearchDestination
+import androidx.navigation.compose.currentBackStackEntryAsState
+import com.example.nordicnews.utils.popAndLaunchSingleTop
 
 
 @Composable
@@ -33,50 +31,51 @@
         val navBackStackEntry by navController.currentBackStackEntryAsState()
         val currentRoute = navBackStackEntry?.destination?.route
 
-        BottomBar.Items.forEach() { item ->
+        BottomBar.Items.forEach { item ->
             NavigationBarItem(
                 selected = currentRoute == item.route,
                 onClick = {
                     navController.navigate(item.route) {
-                        popUpTo(navController.graph.startDestinationId)
-                        launchSingleTop = true
+                        popAndLaunchSingleTop(navController)
                     }
                 },
                 icon = {
-                    if(currentRoute == item.route)
-                        Icon(painter = painterResource(id = item.selectedIcon), contentDescription = null)
-                    else
-                        Icon(painter = painterResource(id = item.unSelectedIcon), contentDescription = null)
+                    if(currentRoute == item.route) {
+                        Icon(
+                            painter = painterResource(id = item.selectedIcon),
+                            contentDescription = null
+                        )
+                    } else {
+                        Icon(
+                            painter = painterResource(id = item.unSelectedIcon),
+                            contentDescription = null
+                        )
+                    }
                 },
                 label = {
-                    if(currentRoute == item.route)
-                    {
+                    if (currentRoute == item.route) {
                         Text(
                             modifier = Modifier
                                 .drawBehind {
                                     val strokeWidthPx = 1.dp.toPx()
-                                    val verticleOffset = size.height - 2.sp.toPx()
+                                    val verticalOffset = size.height - 2.sp.toPx()
                                     drawLine(
-                                        // color = Color(61, 138, 255),
                                         color = Color.Yellow,
                                         strokeWidth = strokeWidthPx,
-                                        start = Offset(0f, verticleOffset),
-                                        end = Offset(size.width,verticleOffset)
+                                        start = Offset(0f, verticalOffset),
+                                        end = Offset(size.width,verticalOffset)
                                     )
                                 },
                             text = stringResource(item.titleRes)
                         )
-                        //Spacer(modifier = Modifier.height(8.dp))
-                    }
-                    else
-                    {
+                    } else {
                         Text(text = stringResource(item.titleRes))
                     }
                 },
                 colors = NavigationBarItemDefaults.colors(
                     selectedIconColor = Color(61, 138, 255),
                     selectedTextColor = Color(61, 138, 255),
-                    indicatorColor = Color.White//MaterialTheme.colorScheme.inverseOnSurface
+                    indicatorColor = Color.White
                 )
             )
         }
Index: app/src/main/java/com/example/nordicnews/ui/settings/SettingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/settings/SettingViewModel.kt b/app/src/main/java/com/example/nordicnews/ui/settings/SettingViewModel.kt
--- a/app/src/main/java/com/example/nordicnews/ui/settings/SettingViewModel.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/settings/SettingViewModel.kt	(date 1717275580543)
@@ -1,6 +1,5 @@
 package com.example.nordicnews.ui.settings
 
-import android.util.Log
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
 import androidx.lifecycle.viewModelScope
@@ -8,25 +7,25 @@
 import androidx.lifecycle.viewmodel.viewModelFactory
 import com.example.nordicnews.NordicNewsApplication
 import com.example.nordicnews.dataStore.UserPreferencesRepository
-import com.example.nordicnews.ui.developerOptions.DeveloperOptionsUiState
-import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.SharingStarted
 import kotlinx.coroutines.flow.StateFlow
-import kotlinx.coroutines.flow.asStateFlow
-import kotlinx.coroutines.flow.filter
 import kotlinx.coroutines.flow.map
 import kotlinx.coroutines.flow.stateIn
-import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
-import kotlinx.coroutines.runBlocking
 
-class SettingViewModel(private val userPreferencesRepository: UserPreferencesRepository) : ViewModel(){
+class SettingViewModel(
+    private val userPreferencesRepository: UserPreferencesRepository
+) : ViewModel() {
     companion object {
         val Factory: ViewModelProvider.Factory = viewModelFactory {
             initializer {
-                val application = (this[ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY] as NordicNewsApplication)
+                val application = this[
+                    ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY
+                ] as NordicNewsApplication
                 val userPreferencesRepository = application.userPreferencesRepository
-                SettingViewModel(userPreferencesRepository=userPreferencesRepository)
+                SettingViewModel(
+                    userPreferencesRepository = userPreferencesRepository
+                )
             }
         }
     }
@@ -38,16 +37,13 @@
     }
 
     val uiState: StateFlow<SettingUiState> = userPreferencesRepository.isLightMode
-
         .map { isModeOn ->
             SettingUiState(isLiteModeOn = isModeOn)
         }
-
         .stateIn(
             scope = viewModelScope,
             started = SharingStarted.WhileSubscribed(500),
             initialValue = SettingUiState()
-
         )
 }
 
Index: app/src/main/java/com/example/nordicnews/ui/settings/SettingsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/settings/SettingsScreen.kt b/app/src/main/java/com/example/nordicnews/ui/settings/SettingsScreen.kt
--- a/app/src/main/java/com/example/nordicnews/ui/settings/SettingsScreen.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/settings/SettingsScreen.kt	(date 1717275319707)
@@ -54,7 +54,7 @@
                 }
             )
         }
-    ){ innerPadding->
+    ) { innerPadding->
 
         Column(modifier = Modifier.padding(innerPadding)) {
             Spacer(modifier = Modifier.padding(4.dp))
Index: app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksViewModel.kt b/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksViewModel.kt
--- a/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksViewModel.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksViewModel.kt	(date 1717273981377)
@@ -2,14 +2,12 @@
 
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
-import androidx.lifecycle.createSavedStateHandle
 import androidx.lifecycle.viewModelScope
 import androidx.lifecycle.viewmodel.initializer
 import androidx.lifecycle.viewmodel.viewModelFactory
 import com.example.nordicnews.NordicNewsApplication
 import com.example.nordicnews.data.ArticleRepository
 import com.example.nordicnews.data.models.Article
-import com.example.nordicnews.ui.detail.DetailViewModel
 import kotlinx.coroutines.flow.SharingStarted
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.map
@@ -28,12 +26,13 @@
     }
 
     val uiState: StateFlow<BookmarksUiState> =
-        articleRepository.getAllArticles().map { BookmarksUiState(it) }
-            .stateIn(
-                scope = viewModelScope,
-                started = SharingStarted.WhileSubscribed(5000),
-                initialValue = BookmarksUiState()
-            )
+        articleRepository.getAllArticles().map {
+            BookmarksUiState(it.reversed())
+        }.stateIn(
+            scope = viewModelScope,
+            started = SharingStarted.WhileSubscribed(5000),
+            initialValue = BookmarksUiState()
+        )
 }
 
 data class BookmarksUiState(
Index: app/src/main/java/com/example/nordicnews/ui/navigation/NordicNewsNavGraph.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/navigation/NordicNewsNavGraph.kt b/app/src/main/java/com/example/nordicnews/ui/navigation/NordicNewsNavGraph.kt
--- a/app/src/main/java/com/example/nordicnews/ui/navigation/NordicNewsNavGraph.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/navigation/NordicNewsNavGraph.kt	(date 1717277314795)
@@ -1,6 +1,7 @@
 package com.example.nordicnews.ui.navigation
 
 import android.net.Uri
+import android.os.Build
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Modifier
 import androidx.navigation.NavHostController
@@ -33,13 +34,13 @@
         navController = navController,
         startDestination = HomeDestination.route,
         modifier = modifier
-    ){
+    ) {
 
         // Home Screen Route
         composable(HomeDestination.route) {
             HomeScreen(
-                navigateToDetailScreen = {
-                    val json = Uri.encode(Gson().toJson(it))
+                navigateToDetailScreen = { article ->
+                    val json = Uri.encode(Gson().toJson(article))
                     navController.navigate("${DetailDestination.route}/$json")
                 },
                 navigateToSearchScreen = {
@@ -58,7 +59,14 @@
                 }
             )
         ) { entry ->
-            val article = entry.arguments?.getParcelable<Article>(DetailDestination.ARTICLE_ARG)
+            val article = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+                entry.arguments?.getParcelable(
+                    DetailDestination.ARTICLE_ARG,
+                    Article::class.java
+                )
+            } else {
+                entry.arguments?.getParcelable(DetailDestination.ARTICLE_ARG)
+            }
 
             DetailScreen(
                 navigateToDetailScreen = {
@@ -74,8 +82,8 @@
         // Search Screen Route 1
         composable(route = SearchDestination.route) {
             SearchScreen(
-                navigateToDetailScreen = {
-                    val json = Uri.encode(Gson().toJson(it))
+                navigateToDetailScreen = { article ->
+                    val json = Uri.encode(Gson().toJson(article))
                     navController.navigate("${DetailDestination.route}/$json")
                 },
                 navController
@@ -91,8 +99,8 @@
             )
         ) {
             SearchScreen(
-                navigateToDetailScreen = {
-                    val json = Uri.encode(Gson().toJson(it))
+                navigateToDetailScreen = { article ->
+                    val json = Uri.encode(Gson().toJson(article))
                     navController.navigate("${DetailDestination.route}/$json")
                 },
                 navController
@@ -102,8 +110,8 @@
         // Bookmarks Screen Route
         composable(BookmarksDestination.route) {
             BookmarksScreen(
-                navigateToDetailScreen = {
-                    val json = Uri.encode(Gson().toJson(it))
+                navigateToDetailScreen = { article ->
+                    val json = Uri.encode(Gson().toJson(article))
                     navController.navigate("${DetailDestination.route}/$json")
                 },
                 navController
@@ -113,14 +121,18 @@
         // Settings Screen Route
         composable(SettingsDestination.route) {
             SettingsScreen(
-                navigateUp = {navController.navigateUp()},
+                navigateUp = {
+                    navController.navigateUp()
+                }
             )
         }
 
         // DeveloperOptions Screen Route
         composable(DeveloperOptionsDestination.route) {
             DeveloperOptionsScreen(
-                navigateUp = {navController.navigateUp()},
+                navigateUp = {
+                    navController.navigateUp()
+                }
             )
         }
     }
Index: app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksScreen.kt b/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksScreen.kt
--- a/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksScreen.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/bookmark/BookmarksScreen.kt	(date 1717279910503)
@@ -42,15 +42,20 @@
 fun BookmarksScreen(
     navigateToDetailScreen : (Article) -> Unit,
     navController: NavController,
-    modifier: Modifier = Modifier,
-    viewModel: BookmarksViewModel = viewModel(factory = BookmarksViewModel.Factory)
+    viewModel: BookmarksViewModel = viewModel(
+        factory = BookmarksViewModel.Factory
+    )
 ) {
     val uiState by viewModel.uiState.collectAsState()
     Scaffold(
         topBar = {
             CenterAlignedTopAppBar(
                 title = {
-                    Text(stringResource(id = BookmarksDestination.titleRes))
+                    Text(
+                        stringResource(
+                            id = BookmarksDestination.titleRes
+                        )
+                    )
                 }
             )
         },
@@ -63,8 +68,7 @@
         }
     ) { innerPadding ->
         LazyColumn(
-            modifier = Modifier
-                .padding(innerPadding),
+            modifier = Modifier.padding(innerPadding)
         ) {
             item { Spacer(modifier = Modifier.height(20.dp)) }
             item {
@@ -83,20 +87,14 @@
                         style = MaterialTheme.typography.headlineMedium,
                         color = Color(29, 27, 32),
                         modifier = Modifier.padding(
-                            //start = 25.dp,
-                            //end = 25.dp,
                             bottom = 20.dp
                         )
                     )
 
                     ArticleListV1(
                         onItemClick = { navigateToDetailScreen(it) },
-                        // Mock Article Data
-                        //articles = ArticleMockData.articleList
-
                         // Data from Api
-                        articles = uiState.bookmarks,
-                        //modifier = Modifier.padding(bottom = 20.dp)
+                        articles = uiState.bookmarks
                     )
                 }
             }
Index: app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptions.kt b/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptions.kt
--- a/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptions.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptions.kt	(date 1717278450114)
@@ -1,44 +1,32 @@
 package com.example.nordicnews.ui.developerOptions
 
-import android.app.Activity
 import android.content.ComponentName
 import android.content.Intent
 import android.content.pm.PackageManager
-import android.text.Spannable.Factory
-import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.Spacer
 import androidx.compose.foundation.layout.padding
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material.icons.filled.Build
-import androidx.compose.material.icons.filled.Settings
 import androidx.compose.material3.Button
-import androidx.compose.material3.ButtonDefaults
 import androidx.compose.material3.CenterAlignedTopAppBar
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
-import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.modifier.modifierLocalConsumer
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.unit.dp
 import androidx.lifecycle.viewmodel.compose.viewModel
-import androidx.navigation.NavController
 import com.example.nordicnews.R
 import com.example.nordicnews.data.Constants
-import com.example.nordicnews.ui.bookmark.BookmarksViewModel
 import com.example.nordicnews.ui.navigation.NavigationDestination
-import com.example.nordicnews.ui.settings.SettingsDestination
 import com.example.nordicnews.ui.shared.SettingsSwitchComp
 
 object DeveloperOptionsDestination : NavigationDestination {
@@ -51,15 +39,21 @@
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun DeveloperOptionsScreen(
-    navigateUp : () -> Unit,
-    viewModel: DeveloperOptionsViewModel = viewModel(factory = DeveloperOptionsViewModel.Factory )
+    navigateUp: () -> Unit,
+    viewModel: DeveloperOptionsViewModel = viewModel(
+        factory = DeveloperOptionsViewModel.Factory
+    )
 ) {
     val uiState by viewModel.uiState.collectAsState()
     Scaffold(
         topBar = {
             CenterAlignedTopAppBar(
                 title = {
-                    Text(stringResource(id = DeveloperOptionsDestination.titleRes))
+                    Text(
+                        stringResource(
+                            id = DeveloperOptionsDestination.titleRes
+                        )
+                    )
                 },
                 navigationIcon = {
                     IconButton(onClick = navigateUp) {
@@ -71,8 +65,7 @@
                 }
             )
         }
-    ){innerPadding->
-       
+    ) { innerPadding->
         Column(modifier = Modifier.padding(innerPadding)) {
             Spacer(modifier = Modifier.padding(4.dp))
             SettingsSwitchComp(
@@ -83,16 +76,13 @@
             ) {
                 viewModel.toggleDebugMode()
             }
-            if(uiState.isDebugModeEnabled)
-            {
+            if (uiState.isDebugModeEnabled) {
                 Spacer(modifier = Modifier.padding(4.dp))
                 Text(
                     text = "Test API URL : ${Constants.DEV_BASE_URL}",
                     modifier = Modifier.padding(start = 25.dp),
                 )
-            }
-            else
-            {
+            } else {
                 Spacer(modifier = Modifier.padding(4.dp))
                 Text(
                     text = "Prod API URL : ${Constants.PROD_BASE_URL}",
@@ -108,20 +98,19 @@
             // Restart Button
             Button(
                 onClick = {
-
                     val packageManager: PackageManager = context.packageManager
-                    val intent: Intent = packageManager.getLaunchIntentForPackage(context.packageName)!!
-                    val componentName: ComponentName = intent.component!!
+                    val intent: Intent? = packageManager.getLaunchIntentForPackage(
+                        context.packageName
+                    )
+                    val componentName: ComponentName? = intent?.component
                     val restartIntent: Intent = Intent.makeRestartActivityTask(componentName)
                     context.startActivity(restartIntent)
                     Runtime.getRuntime().exit(0)
-
                 },
-                modifier = Modifier.padding(top = 8.dp,start = 25.dp)
+                modifier = Modifier.padding(top = 8.dp, start = 25.dp)
             ) {
                 Text(text = "Restart")
             }
         }
     }
-
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptionsViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptionsViewModel.kt b/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptionsViewModel.kt
--- a/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptionsViewModel.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/ui/developerOptions/DeveloperOptionsViewModel.kt	(date 1717278409172)
@@ -7,21 +7,25 @@
 import androidx.lifecycle.viewmodel.viewModelFactory
 import com.example.nordicnews.NordicNewsApplication
 import com.example.nordicnews.dataStore.UserPreferencesRepository
-import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.SharingStarted
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.map
 import kotlinx.coroutines.flow.stateIn
 import kotlinx.coroutines.launch
 
-
-class DeveloperOptionsViewModel(private val userPreferencesRepository: UserPreferencesRepository) : ViewModel(){
+class DeveloperOptionsViewModel(
+    private val userPreferencesRepository: UserPreferencesRepository
+): ViewModel() {
     companion object {
         val Factory: ViewModelProvider.Factory = viewModelFactory {
             initializer {
-                val application = (this[ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY] as NordicNewsApplication)
+                val application = this[
+                    ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY
+                ] as NordicNewsApplication
                 val userPreferencesRepository = application.userPreferencesRepository
-                DeveloperOptionsViewModel(userPreferencesRepository=userPreferencesRepository)
+                DeveloperOptionsViewModel(
+                    userPreferencesRepository = userPreferencesRepository
+                )
             }
         }
     }
Index: app/src/main/java/com/example/nordicnews/data/Constants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/Constants.kt b/app/src/main/java/com/example/nordicnews/data/Constants.kt
--- a/app/src/main/java/com/example/nordicnews/data/Constants.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/Constants.kt	(date 1717281091242)
@@ -6,10 +6,10 @@
     val COUNTRY: String
         get() = "in"
 
-    val PROD_BASE_URL : String
+    val PROD_BASE_URL: String
         get() = "https://newsapi.org/v2/"
 
-    val DEV_BASE_URL : String
+    val DEV_BASE_URL: String
         //get() = "http://192.168.0.232:5003/api/News/"
         get() = "http://172.25.243.172:6005/api/News/"
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/data/ArticleRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/ArticleRepository.kt b/app/src/main/java/com/example/nordicnews/data/ArticleRepository.kt
--- a/app/src/main/java/com/example/nordicnews/data/ArticleRepository.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/ArticleRepository.kt	(date 1717281091238)
@@ -1,9 +1,7 @@
 package com.example.nordicnews.data
 
 import com.example.nordicnews.data.models.Article
-import com.example.nordicnews.data.models.ArticleMockData
 import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.flowOf
 
 class ArticleRepository(private val articleDao: ArticleDao) : IArticleRepository {
 
@@ -13,5 +11,4 @@
     override suspend fun deleteArticle(article: Article) {
         articleDao.delete(article)
     }
-
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/data/IAppContainer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/IAppContainer.kt b/app/src/main/java/com/example/nordicnews/data/IAppContainer.kt
--- a/app/src/main/java/com/example/nordicnews/data/IAppContainer.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/IAppContainer.kt	(date 1717281091241)
@@ -13,7 +13,7 @@
 
 class DefaultAppContainer(
     private val context: Context,
-    private val baseUrl: String
+    baseUrl: String
 ) : IAppContainer {
 
     private val retrofit = Retrofit.Builder()
Index: app/src/main/java/com/example/nordicnews/data/models/Source.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/models/Source.kt b/app/src/main/java/com/example/nordicnews/data/models/Source.kt
--- a/app/src/main/java/com/example/nordicnews/data/models/Source.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/models/Source.kt	(date 1717281091240)
@@ -1,12 +1,10 @@
 package com.example.nordicnews.data.models
 
 import android.os.Parcelable
-import kotlinx.android.parcel.Parcelize
+import kotlinx.parcelize.Parcelize
 
 @Parcelize
 data class Source(
     val id: String?,
     val name: String
-    // TODO: Handle null
-    //val name: String?
 ) : Parcelable
Index: app/src/main/java/com/example/nordicnews/data/models/Category.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/models/Category.kt b/app/src/main/java/com/example/nordicnews/data/models/Category.kt
--- a/app/src/main/java/com/example/nordicnews/data/models/Category.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/models/Category.kt	(date 1717280236859)
@@ -1,7 +1,5 @@
 package com.example.nordicnews.data.models
 
-import androidx.annotation.StringRes
-import androidx.compose.ui.res.stringResource
 import com.example.nordicnews.R
 
 interface Category {
Index: app/src/main/java/com/example/nordicnews/data/models/MockData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/models/MockData.kt b/app/src/main/java/com/example/nordicnews/data/models/MockData.kt
--- a/app/src/main/java/com/example/nordicnews/data/models/MockData.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/models/MockData.kt	(date 1717280236863)
@@ -1,7 +1,5 @@
 package com.example.nordicnews.data.models
 
-import com.example.nordicnews.R
-
 object ArticleMockData{
     val articleList = listOf(
         Article(
@@ -205,6 +203,6 @@
             title = "Google I/O 2023: Making AI more helpful for everyone",
             url = "https://www.businessinsider.com/mike-tyson-sued-for-punching-passenger-jetblue-flight-california-court-2024-5",
             urlToImage = "https://raw.githubusercontent.com/avanisoam/NordicNews/main/MockImages/Mock_DetailImg.png",
-        ),
+        )
     )
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/data/models/Article.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/models/Article.kt b/app/src/main/java/com/example/nordicnews/data/models/Article.kt
--- a/app/src/main/java/com/example/nordicnews/data/models/Article.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/models/Article.kt	(date 1717280236861)
@@ -3,7 +3,7 @@
 import android.os.Parcelable
 import androidx.room.Entity
 import androidx.room.PrimaryKey
-import kotlinx.android.parcel.Parcelize
+import kotlinx.parcelize.Parcelize
 
 @Entity(tableName = "bookmarks")
 @Parcelize
@@ -11,17 +11,10 @@
     val author: String = "",
     val content: String = "",
     val description: String = "",
-    // TODO: Handle null
-    //val description: String? = "",
     val publishedAt: String = "",
     val source: Source = Source(null,""),
     val title: String = "",
     @PrimaryKey
     val url: String = "",
-    //val url: String? = null,
-    val urlToImage: String = "",
-    // TODO: Handle null
-    //val urlToImage: String? = "",
-    //@DrawableRes
-    //val urlToImage: Int
+    val urlToImage: String = ""
 ) : Parcelable
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/dataStore/UserPreferencesRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/dataStore/UserPreferencesRepository.kt b/app/src/main/java/com/example/nordicnews/dataStore/UserPreferencesRepository.kt
--- a/app/src/main/java/com/example/nordicnews/dataStore/UserPreferencesRepository.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/dataStore/UserPreferencesRepository.kt	(date 1717280071046)
@@ -6,7 +6,6 @@
 import androidx.datastore.preferences.core.booleanPreferencesKey
 import androidx.datastore.preferences.core.edit
 import androidx.datastore.preferences.core.emptyPreferences
-import androidx.datastore.preferences.core.stringPreferencesKey
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.catch
 import kotlinx.coroutines.flow.map
@@ -16,8 +15,8 @@
     private val dataStore: DataStore<Preferences>
 ){
     private companion object{
-        val Is_DebugMode_On = booleanPreferencesKey("is_debugMode_on")
-        val Is_LightMode_On = booleanPreferencesKey("is_lightmode_on")
+        val isDebugModeOn = booleanPreferencesKey("is_debugMode_on")
+        val isLightModeOn = booleanPreferencesKey("is_lightmode_on")
 
         const val TAG = "UserPreferencesRepo"
     }
@@ -25,41 +24,41 @@
     // Write in DataStore
     suspend fun savePreference(isDebugMode: Boolean) {
         dataStore.edit { preferences ->
-            preferences[Is_DebugMode_On] = isDebugMode
+            preferences[isDebugModeOn] = isDebugMode
         }
     }
 
     // Read from DataStore
     val isDebugMode : Flow<Boolean> = dataStore.data
         .catch {
-            if(it is IOException) {
+            if (it is IOException) {
                 Log.e(TAG, "Error reading preferences.", it)
                 emit(emptyPreferences())
             } else {
                 throw it
             }
         }
-        .map{ preferences ->
-        preferences[Is_DebugMode_On] ?: true
-    }
+        .map { preferences ->
+            preferences[isDebugModeOn] ?: true
+        }
 
     // Boolean Preference for LiteMode or DetailedMode - Read
     val isLightMode : Flow<Boolean> = dataStore.data
         .catch {
-            if(it is IOException) {
+            if (it is IOException) {
                 Log.e(TAG, "Error reading preferences.", it)
                 emit(emptyPreferences())
             } else {
                 throw it
             }
         }
-        .map{ preferences ->
-            preferences[Is_LightMode_On] ?: false
+        .map { preferences ->
+            preferences[isLightModeOn] ?: false
         }
 
     suspend fun saveDisplayModePreference(isLightMode: Boolean) {
         dataStore.edit { preferences ->
-            preferences[Is_LightMode_On] = isLightMode
+            preferences[isLightModeOn] = isLightMode
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/nordicnews/data/network/NordicNewsApiService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nordicnews/data/network/NordicNewsApiService.kt b/app/src/main/java/com/example/nordicnews/data/network/NordicNewsApiService.kt
--- a/app/src/main/java/com/example/nordicnews/data/network/NordicNewsApiService.kt	(revision d73886238657919c1a7887e06eea8abbab1b3c82)
+++ b/app/src/main/java/com/example/nordicnews/data/network/NordicNewsApiService.kt	(date 1717281091230)
@@ -15,7 +15,7 @@
     suspend fun getNewsBySource(
         @Query("sources") sources: String,
         @Query("page") page: Int,
-        @Query("apiKey") apiKey: String = API_KEY //API_KEY
+        @Query("apiKey") apiKey: String = API_KEY
     ): NewsResponse
 
     @GET("everything?sortBy=popularity")
@@ -23,39 +23,39 @@
         @Query("q") query : String,
         @Query("from") from : LocalDate,
         @Query("to") to : LocalDate?,
-        @Query("apiKey") apiKey: String = API_KEY //API_KEY
+        @Query("apiKey") apiKey: String = API_KEY
     ): NewsResponse
 
     @GET("everything?sortBy=publishedAt")
     suspend fun searchNewsV2(
         @Query("q") query : String,
         @Query("from") from : LocalDate?,
-        @Query("apiKey") apiKey: String = API_KEY //API_KEY
+        @Query("apiKey") apiKey: String = API_KEY
     ): NewsResponse
 
     @GET("everything")
     suspend fun searchNewsByDomain(
         @Query("domains") domains : String,
-        @Query("apiKey") apiKey: String = API_KEY //API_KEY
+        @Query("apiKey") apiKey: String = API_KEY
     ): NewsResponse
 
     @GET("top-headlines")
     suspend fun getHeadlinesByCountryAndCategory(
         @Query("country") country: String = Constants.COUNTRY,
         @Query("category") category: String,
-        @Query("apiKey") apiKey: String = API_KEY //API_KEY
+        @Query("apiKey") apiKey: String = API_KEY
     ): NewsResponse
 
     @GET("top-headlines?sortBy=publishedAt&pageSize=50")
     suspend fun getHeadlinesByCountryAndCategoryV1(
         @Query("category") category: String,
         @Query("country") country: String = Constants.COUNTRY,
-        @Query("apiKey") apiKey: String = API_KEY //API_KEY
+        @Query("apiKey") apiKey: String = API_KEY
     ): NewsResponse
 
     @GET("top-headlines")
     suspend fun getHeadlinesBySource(
         @Query("sources") sources: String,
-        @Query("apiKey") apiKey: String = API_KEY //API_KEY
+        @Query("apiKey") apiKey: String = API_KEY
     ): NewsResponse
 }
\ No newline at end of file
